<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CH Blog | 기술 블로그</title>
    <link>https://chlee1001.github.io/</link>
    
    <atom:link href="https://chlee1001.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Chaehyeon&#39;s Dev Blog</description>
    <pubDate>Thu, 10 Feb 2022 13:54:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[JS] 프로토타입 간단 정리</title>
      <link>https://chlee1001.github.io/2022/02/10/JS-Prototype-1-22-02-10/</link>
      <guid>https://chlee1001.github.io/2022/02/10/JS-Prototype-1-22-02-10/</guid>
      <pubDate>Thu, 10 Feb 2022 14:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Prototype
&lt;/aside&gt;



&lt;p&gt;자바스크립트는 프로토타입 기반의 언어다.&lt;/p&gt;
&lt;h1 id=&quot;constructor-생성자&quot;&gt;&lt;a href=&quot;#constructor-생성자&quot; class=&quot;headerlink&quot; title=&quot;constructor (생성자)&quot;&gt;&lt;/a&gt;constructor (생성자)&lt;/h1&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Paerson&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Prototype</aside><p>자바스크립트는 프로토타입 기반의 언어다.</p><h1 id="constructor-생성자"><a href="#constructor-생성자" class="headerlink" title="constructor (생성자)"></a>constructor (생성자)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paerson</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자함수는 프로토타입이 모든 자바스크립트에 들어있듯이 생성자도 모든 자바스크립트에서 확인가능하다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="keyword">new</span> Person(<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> two = <span class="keyword">new</span> Person(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one.constructor); <span class="comment">// [Function: Person]</span></span><br><span class="line"><span class="built_in">console</span>.log(two.constructor.name); <span class="comment">// Person</span></span><br></pre></td></tr></table></figure><p>어떠한 생성자로부터 생성되었는지 유추할 수 있다.</p><p><code>instanceof</code>로 식별</p><p>object instanceof constructor</p><h1 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong><strong>proto</strong></strong></h1><p>브라우저에서 비표준으로 제공했던…</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.__proto__ ...로 array의 프로토타입에 접근</span><br></pre></td></tr></table></figure><p>자바스크립트의 프로토타입에 직접 접근이 아니라 접근제어자로 접근할 수 있도록 도와주는 것으로 생각하면 됨. ⇒ <strong>하지만 사용하지 않는 것이 좋음</strong></p><p>ECMA Script2015부터는 표준화 된</p><ul><li>getPrototypeOf()</li><li>setPrototypeOf()</li></ul><p>를 사용하는 것을 추천</p><h1 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ANIMAL&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.sayName()); <span class="comment">// ANIMAL</span></span><br><span class="line"><span class="keyword">const</span> dog = <span class="built_in">Object</span>.create(animal);</span><br><span class="line"><span class="built_in">console</span>.log(dog.sayName()); <span class="comment">// ANIMAL</span></span><br></pre></td></tr></table></figure><h1 id="프로토타입-확장-extends-상속"><a href="#프로토타입-확장-extends-상속" class="headerlink" title="프로토타입 확장 (extends, 상속)"></a>프로토타입 확장 (extends, 상속)</h1><p>부모 ⇒ 자식 … 상속보단 확장이란 개념이 더 이해하기 쉽다. 부모가 가진 기능보다 자식이 더 많이 가질 수 있기 때문</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Super Class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name, sound</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.sound = sound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;가(이)&#x27;</span> + <span class="built_in">this</span>.sound + <span class="string">&#x27;소리를 낸다.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sub Class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Friends</span>(<span class="params">name, sound</span>) </span>&#123;</span><br><span class="line">    Animal.call(<span class="built_in">this</span>, name, sound); <span class="comment">// 명시적 바인딩 -&gt; Animal함수의 this를 Friends로 바인딩</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Friends.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">Friends.prototype.constructor = Friends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Friends(<span class="string">&#x27;개&#x27;</span>, <span class="string">&#x27;멍멍&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Friends(<span class="string">&#x27;고양이&#x27;</span>, <span class="string">&#x27;냐옹&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.getInfo()); <span class="comment">// 개가(이)멍멍소리를 낸다.</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.getInfo()); <span class="comment">// 고양이가(이)냐옹소리를 낸다.</span></span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">dog.contructor.name <span class="comment">// Friends</span></span><br><span class="line"></span><br><span class="line">dog <span class="keyword">instanceof</span> Friends <span class="comment">// true</span></span><br><span class="line">dog <span class="keyword">instanceof</span> Animal <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/">프로토타입</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8/">프로토타입 체인</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%83%9D%EC%84%B1%EC%9E%90/">생성자</category>
      
      
      <comments>https://chlee1001.github.io/2022/02/10/JS-Prototype-1-22-02-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] this 간단 정리</title>
      <link>https://chlee1001.github.io/2022/02/10/JS-This-1-22-02-10/</link>
      <guid>https://chlee1001.github.io/2022/02/10/JS-This-1-22-02-10/</guid>
      <pubDate>Thu, 10 Feb 2022 12:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript this
&lt;/aside&gt;



&lt;p&gt;JavaScript에서 함수의 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this&lt;/a&gt; 키워드는 다른 언어와 조금 다르게 동작한다.&lt;/p&gt;
&lt;p&gt;엄격모드와 비엄격 모드에서도 일부 차이가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this는 scope와 관계가 있다.&lt;/li&gt;
&lt;li&gt;객체에도 영향을 준다.&lt;/li&gt;
&lt;li&gt;this가 어디에 묶여있냐를 아는 것이 코드를 작성하는 시점, 동작하는 시점에 차이가 있을 수 있다.&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript this</aside><p>JavaScript에서 함수의 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this">this</a> 키워드는 다른 언어와 조금 다르게 동작한다.</p><p>엄격모드와 비엄격 모드에서도 일부 차이가 있다.</p><ul><li>this는 scope와 관계가 있다.</li><li>객체에도 영향을 준다.</li><li>this가 어디에 묶여있냐를 아는 것이 코드를 작성하는 시점, 동작하는 시점에 차이가 있을 수 있다.</li></ul><p>(함수를 어떻게 호출했는지 상관하지 않고 this값을 설정할 수 있는 <code>bind</code>메서드를 도입했고, ES2015는 스스로의 this 바인딩을 제공하지 않는 화살표 함수 를 추가했습니다.)</p><h2 id="암시적-바인딩"><a href="#암시적-바인딩" class="headerlink" title="암시적 바인딩"></a>암시적 바인딩</h2><p>암시적인 this 바인딩.. 사용자가 생각하지 않은대로 동작할 수 있다.</p><h3 id="전역-공간에서의-this"><a href="#전역-공간에서의-this" class="headerlink" title="전역 공간에서의 this"></a>전역 공간에서의 this</h3><ul><li>node.js 환경에서의 this는 <code>global</code></li><li>브라우저에서의 this는 <code>window</code></li></ul><h3 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h3><ul><li>함수에서의 this는 <code>window</code> ⇒ 전역공간에서의 this와 다르지 않다.</li></ul><h3 id="객체-메서드"><a href="#객체-메서드" class="headerlink" title="객체 (메서드)"></a>객체 (메서드)</h3><ul><li>this는 호출되는 대상의 객체를 가리키고 있다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">name: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.method() <span class="comment">// &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="명시적-바인딩"><a href="#명시적-바인딩" class="headerlink" title="명시적 바인딩"></a>명시적 바인딩</h2><ul><li>call(), bind(), apply()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;입니다&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zero = &#123;</span><br><span class="line">    name: <span class="string">&#x27;베이스&#x27;</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;입니다&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>call()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayFullName</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="built_in">this</span>.sayName()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = sayFullName.call(person, <span class="string">&#x27;Chaehyeon &#x27;</span>);</span><br><span class="line"><span class="comment">// Chaehyeon Lee입니다.</span></span><br></pre></td></tr></table></figure><ul><li>apply()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayFullName</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="built_in">this</span>.sayName()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = sayFullName.apply(person, [<span class="string">&#x27;Chaehyeon &#x27;</span>,<span class="string">&#x27;채현 &#x27;</span>]);</span><br><span class="line"><span class="comment">// 채현 Lee입니다.</span></span><br></pre></td></tr></table></figure><ul><li>bind()<ul><li>this를 묶어서 사용가능한다.</li><li>React Class Component에서 사용했다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/Object/">Object</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://chlee1001.github.io/tags/this/">this</category>
      
      <category domain="https://chlee1001.github.io/tags/bind/">bind</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%B0%94%EC%9D%B8%EB%94%A9/">바인딩</category>
      
      
      <comments>https://chlee1001.github.io/2022/02/10/JS-This-1-22-02-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 스코프 간단 정리</title>
      <link>https://chlee1001.github.io/2022/02/10/JS-Scope-1-22-02-10/</link>
      <guid>https://chlee1001.github.io/2022/02/10/JS-Scope-1-22-02-10/</guid>
      <pubDate>Wed, 09 Feb 2022 16:01:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Scope
&lt;/aside&gt;



&lt;h1 id=&quot;전역-스코프-Global&quot;&gt;&lt;a href=&quot;#전역-스코프-Global&quot; class=&quot;headerlink&quot; title=&quot;전역 스코프 (Global)&quot;&gt;&lt;/a&gt;전역 스코프 (Global)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;그냥 가장 바깥쪽&lt;/li&gt;
&lt;li&gt;언제 어디서나 접근 가능하기 때문에 재정의가 가능하다 ← 큰 문제&lt;ul&gt;
&lt;li&gt;그 결과, 프로그램의 실행 결과 때 내가 만든 변수들의 결과를 예측하기 어려워짐 → 팀 단위로 개발할 때 최악&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;지역-스코프&quot;&gt;&lt;a href=&quot;#지역-스코프&quot; class=&quot;headerlink&quot; title=&quot;지역 스코프&quot;&gt;&lt;/a&gt;지역 스코프&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Scope</aside><h1 id="전역-스코프-Global"><a href="#전역-스코프-Global" class="headerlink" title="전역 스코프 (Global)"></a>전역 스코프 (Global)</h1><ul><li>그냥 가장 바깥쪽</li><li>언제 어디서나 접근 가능하기 때문에 재정의가 가능하다 ← 큰 문제<ul><li>그 결과, 프로그램의 실행 결과 때 내가 만든 변수들의 결과를 예측하기 어려워짐 → 팀 단위로 개발할 때 최악</li></ul></li></ul><h1 id="지역-스코프"><a href="#지역-스코프" class="headerlink" title="지역 스코프"></a>지역 스코프</h1><h2 id="함수-스코프"><a href="#함수-스코프" class="headerlink" title="함수 스코프"></a>함수 스코프</h2><h2 id="블록-스코프"><a href="#블록-스코프" class="headerlink" title="블록 스코프"></a>블록 스코프</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 블록</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수 스코프 블록</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; <span class="comment">// 블록 스코프 블록</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="전역-객체"><a href="#전역-객체" class="headerlink" title="전역 객체"></a>전역 객체</h1><h2 id="브라우저"><a href="#브라우저" class="headerlink" title="브라우저"></a>브라우저</h2><p><strong>⇒ window</strong></p><h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><p><strong>⇒ Global</strong></p><h2 id="this"><a href="#this" class="headerlink" title="// this"></a>// this</h2><ul><li>브라우저에서 호출하면 window불러옴</li></ul><h1 id="호이스팅-Hoisting"><a href="#호이스팅-Hoisting" class="headerlink" title="호이스팅 (Hoisting)"></a>호이스팅 (Hoisting)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hoist = <span class="string">&#x27;호이스팅&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// 호이스팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><ul><li>첫번 째 console.log가 오류나지 않는 이유는<ul><li>변수 선언을 직접적으로 끌어올림</li><li>그래서 위 코드와 아래 코드랑 같다.</li></ul>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hoist; <span class="comment">// 1. 변수 선언</span></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// undefined // 2. 실행</span></span><br><span class="line"></span><br><span class="line">    hoist = <span class="string">&#x27;호이스팅&#x27;</span>; <span class="comment">// 3. 재할당</span></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// 호이스팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></li></ul><p><strong>애초부터 <code>var</code>를 안쓰면 된다.</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// Cannnot access &#x27;hoist&#x27; before initialization</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span>/<span class="keyword">const</span> hoist = <span class="string">&#x27;호이스팅&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// 호이스팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// Cannnot access &#x27;hoist&#x27; before initialization</span></span><br></pre></td></tr></table></figure><ul><li>임시적 사각지대 (TDZ)가 생긴다.</li><li>내부적으로 호이스팅이 일어나지만, 사용자에게는 보이지 않는것처럼 에러를 준다.</li></ul><h1 id="IIFE-즉시-실행-함수-표현"><a href="#IIFE-즉시-실행-함수-표현" class="headerlink" title="IIFE (즉시 실행 함수 표현)"></a>IIFE (즉시 실행 함수 표현)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">// 1</span></span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>함수를 괄호안에 넣고 바로 실행</p><ul><li>함수 공간을 완전히 분리할 수 있기 때문에 사용한다.<ul><li>그래서 let/const가 없을 때에 사람들이 외부에서 접근할 수 없게 블록스코프를 흉내내게 사용했다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/Object/">Object</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://chlee1001.github.io/tags/Scope/">Scope</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%8A%A4%EC%BD%94%ED%94%84/">스코프</category>
      
      <category domain="https://chlee1001.github.io/tags/Hoisting/">Hoisting</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85/">호이스팅</category>
      
      <category domain="https://chlee1001.github.io/tags/IIFE/">IIFE</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4/">전역객체</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%B8%94%EB%A1%9D/">블록</category>
      
      
      <comments>https://chlee1001.github.io/2022/02/10/JS-Scope-1-22-02-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 자료 다루기</title>
      <link>https://chlee1001.github.io/2022/02/06/JS-Data-1-22-02-06/</link>
      <guid>https://chlee1001.github.io/2022/02/06/JS-Data-1-22-02-06/</guid>
      <pubDate>Sat, 05 Feb 2022 16:16:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript 자료 다루기
&lt;/aside&gt;



&lt;h1 id=&quot;객체&quot;&gt;&lt;a href=&quot;#객체&quot; class=&quot;headerlink&quot; title=&quot;객체&quot;&gt;&lt;/a&gt;객체&lt;/h1&gt;&lt;h2 id=&quot;Object-keys&quot;&gt;&lt;a href=&quot;#Object-keys&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys()&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;객체의 키들이다~~라는 느낌으로 객체의 키들이 배열로 반환된다.&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript 자료 다루기</aside><h1 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h1><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys()</a></h2><ul><li>객체의 키들이다~~라는 느낌으로 객체의 키들이 배열로 반환된다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(object1));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values()</a></h2><ul><li>객체의 값들이다~~라는 느낌으로 객체의 Value들이 배열로 반환된다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(object1));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;somestring&quot;, 42, false]</span></span><br></pre></td></tr></table></figure><h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries()</a></h2><ul><li>객체를 인자로 받아, key와 value를 쌍으로 가진 배열을 반환한다.</li><li>for…in와 같은 순서로 주어진 객체 자체의 enumerable 속성을 가짐<ul><li>인덱스마다 배열을 가져서, 첫번째가 key, 두번째가 value이다.<ul><li>배열안에 배열</li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(object1)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output:</span></span><br><span class="line"><span class="comment">// &quot;a: somestring&quot;</span></span><br><span class="line"><span class="comment">// &quot;b: 42&quot;</span></span><br></pre></td></tr></table></figure><h1 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h1><h2 id="요소-추가와-제거"><a href="#요소-추가와-제거" class="headerlink" title="요소 추가와 제거"></a>요소 추가와 제거</h2><ul><li><p>unshift ⇒ 배열의 앞에 요소 추가</p></li><li><p>push ⇒ 배열의 끝에 요소 추가</p></li><li><p>shift ⇒ 배열의 앞에 요소 제거</p></li><li><p>pop ⇒ 배열의 끝에 요소 제거</p></li><li><p>splice ⇒  배열의 인덱스를 기반으로 요소 추가 및 제거</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line">months.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="요소-병합"><a href="#요소-병합" class="headerlink" title="요소 병합"></a>요소 병합</h2><ul><li>concat</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = array1.concat(array2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array3);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alpha = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">alpha.concat(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 결과: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = [...array1, ...array2];</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="고차-함수로-조작-내장-메서드"><a href="#고차-함수로-조작-내장-메서드" class="headerlink" title="고차 함수로 조작 (내장 메서드)"></a>고차 함수로 조작 (내장 메서드)</h2><ul><li>대표적으로 map, filter, reduce</li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> langs = [<span class="string">&#x27;JS&#x27;</span>, <span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newLangs = langs.map(<span class="function"><span class="params">lang</span> =&gt;</span> lang + <span class="string">&#x27; 언어&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newLangs);</span><br><span class="line"><span class="comment">// [ &#x27;JS 언어&#x27;, &#x27;HTML 언어&#x27;, &#x27;CSS 언어&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> langs = [<span class="string">&#x27;JS&#x27;</span>, <span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = langs.filter(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> lang === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strings = langs.filter(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> lang === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(strings)</span><br><span class="line"><span class="comment">// [ &#x27;JS&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27; ]</span></span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> el === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> numbers = langs.filter(isNumber);</span><br><span class="line"><span class="built_in">console</span>.log(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isString = <span class="function">(<span class="params">el</span>) =&gt;</span> <span class="keyword">typeof</span> el === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> strings = langs.filter(isString)</span><br><span class="line"><span class="built_in">console</span>.log(string)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3 ]</span></span><br><span class="line"><span class="comment">// [ &#x27;JS&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><ul><li>그전에 전형적인 명령어 프로그래밍 방식</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// argument로 받거나</span></span><br><span class="line"><span class="comment">// 인자에 spread형식으로 받거나...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTotal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        temp = temp + <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumTotal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line"><span class="comment">// 28</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTotal</span>(<span class="params">...numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// reduce((누적값, 현재값)&#123;&#125;,초기값)</span></span><br><span class="line">    <span class="keyword">return</span> numbers.reduce(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 첫번째는 초기값(total(0))+ 인자(1)이 total로 들어가고</span></span><br><span class="line"><span class="comment">// 그 다음 total(1)+인자(cur(2))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumTotal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure><h2 id="요소-정렬"><a href="#요소-정렬" class="headerlink" title="요소 정렬"></a>요소 정렬</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orderNumbers = numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="built_in">console</span>.log(orderNumbers);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strings = [<span class="string">&#x27;마&#x27;</span>, <span class="string">&#x27;가&#x27;</span>, <span class="string">&#x27;라&#x27;</span>, <span class="string">&#x27;나&#x27;</span>, <span class="string">&#x27;다&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> orderStrings = strings.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b));</span><br><span class="line"><span class="built_in">console</span>.log(orderStrings);</span><br><span class="line"><span class="comment">//[ &#x27;가&#x27;, &#x27;나&#x27;, &#x27;다&#x27;, &#x27;라&#x27;, &#x27;마&#x27; ]</span></span><br></pre></td></tr></table></figure><h2 id="값-검색"><a href="#값-검색" class="headerlink" title="값 검색"></a>값 검색</h2>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/Object/">Object</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://chlee1001.github.io/tags/Array/">Array</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%B0%B0%EC%97%B4/">배열</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%A3%8C/">자료</category>
      
      
      <comments>https://chlee1001.github.io/2022/02/06/JS-Data-1-22-02-06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] Object 객체</title>
      <link>https://chlee1001.github.io/2022/02/02/JS-Object-1-22-02-02/</link>
      <guid>https://chlee1001.github.io/2022/02/02/JS-Object-1-22-02-02/</guid>
      <pubDate>Wed, 02 Feb 2022 14:45:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Object
&lt;/aside&gt;

&lt;h1 id=&quot;객체-생성&quot;&gt;&lt;a href=&quot;#객체-생성&quot; class=&quot;headerlink&quot; title=&quot;객체 생성&quot;&gt;&lt;/a&gt;객체 생성&lt;/h1&gt;&lt;p&gt;일반적으로 생성 할 수 있는 객체&lt;/p&gt;
&lt;h3 id=&quot;싱글-리터럴-Literal-객체&quot;&gt;&lt;a href=&quot;#싱글-리터럴-Literal-객체&quot; class=&quot;headerlink&quot; title=&quot;싱글 리터럴 (Literal) 객체&quot;&gt;&lt;/a&gt;싱글 리터럴 (Literal) 객체&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Object</aside><h1 id="객체-생성"><a href="#객체-생성" class="headerlink" title="객체 생성"></a>객체 생성</h1><p>일반적으로 생성 할 수 있는 객체</p><h3 id="싱글-리터럴-Literal-객체"><a href="#싱글-리터럴-Literal-객체" class="headerlink" title="싱글 리터럴 (Literal) 객체"></a>싱글 리터럴 (Literal) 객체</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">property: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="생성자-함수-객체-PascalCase"><a href="#생성자-함수-객체-PascalCase" class="headerlink" title="생성자 함수 객체 // PascalCase"></a>생성자 함수 객체 // PascalCase</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NewObject</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObject = <span class="keyword">new</span> NewObject(’Lee’);</span><br></pre></td></tr></table></figure><p>파스칼 케이스 → 암묵적, 명시적 생성자 함수</p><h3 id="Object-Create"><a href="#Object-Create" class="headerlink" title="Object.Create()"></a>Object.Create()</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newObject2 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">name: &#123;</span><br><span class="line">value: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">writable: <span class="literal">true</span>, <span class="comment">// 덮어쓸 수 있는지</span></span><br><span class="line">enumerable: <span class="literal">true</span>, <span class="comment">// forin문과 같은 것으로 열거할 수 있는지</span></span><br><span class="line">configurable: <span class="literal">true</span>, <span class="comment">// 객체 기술자를 수정할 수 있는지</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// const newObject2 = Object.create(프로토타입, 객체 서술자(기술자));</span></span><br><span class="line"></span><br><span class="line">newObject2.name = <span class="string">&#x27;Kim&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newObject2) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="프로퍼티-열거"><a href="#프로퍼티-열거" class="headerlink" title="프로퍼티 열거"></a>프로퍼티 열거</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">prop1: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">prop2: <span class="string">&#x27;value2&#x27;</span>,</span><br><span class="line">prop3: <span class="string">&#x27;value3&#x27;</span>,</span><br><span class="line">prop4: <span class="string">&#x27;value4&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prop = <span class="string">&#x27;prop&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> prop1 = <span class="string">&#x27;prop1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">obj.prop1 <span class="comment">// value1</span></span><br><span class="line">obj[<span class="string">&#x27;prop1&#x27;</span>] <span class="comment">// value1</span></span><br><span class="line">obj[prop + <span class="number">1</span>] <span class="comment">// value1</span></span><br><span class="line">obj[prop1] <span class="comment">// value1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key); <span class="comment">// prop1, prop2, prop3, prop4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[key]); <span class="comment">// value1, value2, value3, value4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="체인닝-방지를-위해"><a href="#체인닝-방지를-위해" class="headerlink" title="체인닝 방지를 위해"></a>체인닝 방지를 위해</h2><p>블록 스코프 내에 변수가 없으면 그 위로 찾아 간다…</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj[key]); <span class="comment">// value1, value2, value3, value4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 상속되거나 확장되어 사용 된 객체의 상위에서 꺼내오지 않도록 하는 방어문</span></span><br></pre></td></tr></table></figure><h1 id="프로퍼티-조작"><a href="#프로퍼티-조작" class="headerlink" title="프로퍼티 조작"></a>프로퍼티 조작</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">firstName: <span class="string">&quot;Chaehyeon&quot;</span>,</span><br><span class="line">location: <span class="string">&quot;Korea&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 추가</span></span><br><span class="line">person.lastName: <span class="string">&quot;Lee&quot;</span></span><br><span class="line"><span class="comment">// 수정</span></span><br><span class="line">person.lastName: <span class="string">&quot;lee&quot;</span></span><br><span class="line"><span class="comment">// 삭제</span></span><br><span class="line">delet person.location;</span><br><span class="line"></span><br><span class="line">person; <span class="comment">// &#123; firstName: &quot;Chaehyeon&quot;, lastName: &quot;lee&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const는 재할당을 막는 것... 그래서 가능</span></span><br></pre></td></tr></table></figure><h1 id="프로퍼티-접근자-getter-setter"><a href="#프로퍼티-접근자-getter-setter" class="headerlink" title="프로퍼티 접근자 (getter, setter)"></a>프로퍼티 접근자 (getter, setter)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 추가, 수정, 삭제 등을 접근해서 조작할 때 안전하게 하기 위해</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">_firstName: <span class="string">&quot;Chaehyeon&quot;</span>,</span><br><span class="line">lastName: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title">firstName</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._firstName.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="title">firstName</span>(<span class="params">newFirstName</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> newFirstName !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>._firstName = <span class="string">&#x27;undefinedName&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>._firstName = newFirstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._firstName + <span class="built_in">this</span>.lastName + <span class="string">&#x27;입니다&#x27;</span>.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(person.firstName); // CHAEHYEON</span></span><br><span class="line"><span class="comment">// console.log(person.fullName); // LeeChaehyeon입니다</span></span><br><span class="line"></span><br><span class="line">person.firstName = <span class="number">12345</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.firstName); <span class="comment">// UNDEFINDEDNAME</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="인스턴스"><a href="#인스턴스" class="headerlink" title="인스턴스"></a>인스턴스</h1><p>OOP</p><p>인스턴스 === 유일한, 고유한 객체?</p><p>객체 하나하나가 곧 인스턴스이다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">name: <span class="string">&#x27;chaehyeon&#x27;</span>,</span><br><span class="line">age: <span class="number">26</span>,</span><br><span class="line">locaiton: <span class="string">&#x27;korea&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me2 = &#123;</span><br><span class="line">name: <span class="string">&#x27;chaehyeon&#x27;</span>,</span><br><span class="line">age: <span class="number">26</span>,</span><br><span class="line">locaiton: <span class="string">&#x27;korea&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me === me2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(me.name === me2.name); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 그 자체를 비교할 때에는 객체의 메모리 주소를 본다.</span></span><br><span class="line"><span class="comment">// 당연히 메모리주소는 다르다</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">name: <span class="string">&#x27;chaehyeon&#x27;</span>,</span><br><span class="line">age: <span class="number">26</span>,</span><br><span class="line">locaiton: <span class="string">&#x27;korea&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 자주 만들고 싶을 때 -&gt; 생성자 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, location</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.location = location;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27; 입니다&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 여기서 this는 &quot;생성 될&quot; 인스턴스를 가리킨다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me2 = <span class="keyword">new</span> Person(<span class="string">&#x27;ChaehyeonLee&#x27;</span>, <span class="number">26</span>, <span class="string">&#x27;korea&#x27;</span>);</span><br><span class="line"><span class="comment">// Person &#123; name: &#x27;ChaehyeonLee&#x27;, age: 26, location: &#x27;korea&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> you <span class="keyword">new</span> Person(<span class="string">&#x27;Kim&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;korea&#x27;</span>);</span><br><span class="line"><span class="comment">// Person &#123; name: &#x27;Kim&#x27;, age: 20, location: &#x27;korea&#x27; &#125;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/Object/">Object</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      
      <comments>https://chlee1001.github.io/2022/02/02/JS-Object-1-22-02-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] DOM 문서 객체 모델</title>
      <link>https://chlee1001.github.io/2022/02/02/JS-DOM-1-22-02-02/</link>
      <guid>https://chlee1001.github.io/2022/02/02/JS-DOM-1-22-02-02/</guid>
      <pubDate>Wed, 02 Feb 2022 13:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript DOM
&lt;/aside&gt;



&lt;h2 id=&quot;DOM-문서-객체-모델…Document-Object-Model&quot;&gt;&lt;a href=&quot;#DOM-문서-객체-모델…Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;DOM (문서 객체 모델…Document Object Model)&quot;&gt;&lt;/a&gt;DOM (문서 객체 모델…Document Object Model)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML ⇒ 문서&lt;/li&gt;
&lt;li&gt;문서를 조작하는 언어 ⇒ JavaScript&lt;/li&gt;
&lt;li&gt;Document Object Model ← JavaScript가 DOM을 통해 HTML을 조작&lt;/li&gt;
&lt;li&gt;DOM 내부에는 Node: HTML 요소 하나하나 전부를 지칭&lt;ul&gt;
&lt;li&gt;Node는 Tree형태로 부모노드가 자식노드를, 자식노드가 그 자식노드를…&lt;/li&gt;
&lt;li&gt;각 Node에는 수 많은 Properties, Methods…가 존재&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript DOM</aside><h2 id="DOM-문서-객체-모델…Document-Object-Model"><a href="#DOM-문서-객체-모델…Document-Object-Model" class="headerlink" title="DOM (문서 객체 모델…Document Object Model)"></a>DOM (문서 객체 모델…Document Object Model)</h2><ul><li>HTML ⇒ 문서</li><li>문서를 조작하는 언어 ⇒ JavaScript</li><li>Document Object Model ← JavaScript가 DOM을 통해 HTML을 조작</li><li>DOM 내부에는 Node: HTML 요소 하나하나 전부를 지칭<ul><li>Node는 Tree형태로 부모노드가 자식노드를, 자식노드가 그 자식노드를…</li><li>각 Node에는 수 많은 Properties, Methods…가 존재</li></ul></li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>HTML문서를 JavaScript로 모델링 한 것이 DOM</li><li>인터페이스를 하나하나 자르면 단위가 Node이며, Node는 Tree구조로 이루어져있다.</li></ul><p>Eg) ’li’ 태그를 뽑아보면 정보가아래처럼 수 많이 담겨있다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">accessKey: <span class="string">&quot;&quot;</span></span><br><span class="line">ariaAtomic: <span class="literal">null</span></span><br><span class="line">ariaAutoComplete: <span class="literal">null</span></span><br><span class="line">ariaBusy: <span class="literal">null</span></span><br><span class="line">ariaChecked: <span class="literal">null</span></span><br><span class="line">ariaColCount: <span class="literal">null</span></span><br><span class="line">ariaColIndex: <span class="literal">null</span></span><br><span class="line">ariaColSpan: <span class="literal">null</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Dom-선택"><a href="#Dom-선택" class="headerlink" title="Dom 선택"></a>Dom 선택</h2><h2 id="자바스크립트에서-HTML-특정-Element들을-가져오는-법-고전적"><a href="#자바스크립트에서-HTML-특정-Element들을-가져오는-법-고전적" class="headerlink" title="자바스크립트에서 HTML 특정 Element들을 가져오는 법 (고전적)"></a>자바스크립트에서 HTML 특정 Element들을 가져오는 법 (고전적)</h2><ul><li><p>Document.getElementById() 문서에 특정 id만 가져오고 싶을 때</p></li><li><p>Element.getElementsByClassName()</p><p>클래스 이름으로… 모든 자식의 엘리먼트를 가져온다. → HTML Collection 형태로 가져온다.</p></li><li><p>Document.getElementsByTagName()</p><p>태그 이름으로 가져온다.</p></li></ul><h2 id="자바스크립트에서-HTML-특정-Element들을-가져오는-법-비교적-최신"><a href="#자바스크립트에서-HTML-특정-Element들을-가져오는-법-비교적-최신" class="headerlink" title="자바스크립트에서 HTML 특정 Element들을 가져오는 법 (비교적 최신)"></a>자바스크립트에서 HTML 특정 Element들을 가져오는 법 (비교적 최신)</h2><ul><li><p>Document.querySelector()</p><p>id(.), class(#), tag name 모두에 사용가능, 첫번째로 보이는 것을 가져온다.</p></li><li><p>document.querySelectorAll()</p><p>해당하는 것을 모두 가져온다. (문자열 O) ⇒ NodeList로 가져오기 때문에 Array로 변환해서 사용한다.</p></li><li><p>그 외 다양한 조합으로 사용가능하다.</p><p>eg) div.note → div태그 내에 note id를 가져온다.</p></li></ul><h2 id="Dom-조작"><a href="#Dom-조작" class="headerlink" title="Dom 조작"></a>Dom 조작</h2><p>조작하기 위한 method들도 매우 많기 때문에 MDN문서를 보면서…</p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Node/textContent">textContent</a>()… 텍스트 삽입</li><li>removeChild()… child 제거</li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Document/createElement">createElement</a>()…element 삽입</li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Node/appendChild">appendChild</a>()</li></ul><hr><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Element/innerHTML">innerHTML</a>을 통해서 문자열로 컨트롤 가능하다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/DOM/">DOM</category>
      
      
      <comments>https://chlee1001.github.io/2022/02/02/JS-DOM-1-22-02-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] Algorithm - 자주 쓰이는 구문 정리(22.02.06)</title>
      <link>https://chlee1001.github.io/2022/01/31/JS-Algorithm-1-22-01-31/</link>
      <guid>https://chlee1001.github.io/2022/01/31/JS-Algorithm-1-22-01-31/</guid>
      <pubDate>Mon, 31 Jan 2022 09:26:50 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript를 이용하여 알고리즘 문제를 풀 때 자주 쓰이는 구문을 정리하자!
&lt;/aside&gt;


&lt;h1 id=&quot;배열-중복값-개수-구하기&quot;&gt;&lt;a href=&quot;#배열-중복값-개수-구하기&quot; class=&quot;headerlink&quot; title=&quot;배열 중복값 개수 구하기&quot;&gt;&lt;/a&gt;배열 중복값 개수 구하기&lt;/h1&gt;&lt;h3 id=&quot;reduce&quot;&gt;&lt;a href=&quot;#reduce&quot; class=&quot;headerlink&quot; title=&quot;reduce()&quot;&gt;&lt;/a&gt;reduce()&lt;/h3&gt;&lt;p&gt;reduce() 함수는, 배열의 값을 순회하면서 배열의 값을 특정 형태로 누적하는데 사용합니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript를 이용하여 알고리즘 문제를 풀 때 자주 쓰이는 구문을 정리하자!</aside><h1 id="배열-중복값-개수-구하기"><a href="#배열-중복값-개수-구하기" class="headerlink" title="배열 중복값 개수 구하기"></a>배열 중복값 개수 구하기</h1><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce() 함수는, 배열의 값을 순회하면서 배열의 값을 특정 형태로 누적하는데 사용합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputNum = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = inputNum.reduce(<span class="function">(<span class="params">obj, t</span>) =&gt;</span> (obj[t] = obj[t] ? obj[t] + <span class="number">1</span> : <span class="number">1</span>, obj), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = inputNum.reduce(<span class="function">(<span class="params">obj, t</span>) =&gt;</span> &#123;</span><br><span class="line">    obj[t] = (obj[t] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; &#x27;1&#x27;: 3, &#x27;2&#x27;: 2, &#x27;3&#x27;: 1, &#x27;4&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cnt = &#123;&#125;</span><br><span class="line">inputNum.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> (cnt[x] ? (cnt[x] += <span class="number">1</span>) : (cnt[x] = <span class="number">1</span>)));</span><br><span class="line"><span class="comment">// &#123; &#x27;1&#x27;: 3, &#x27;2&#x27;: 2, &#x27;3&#x27;: 1, &#x27;4&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>forEach의 callback함수를 풀어쓰면 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cnt[x]) &#123;</span><br><span class="line">cnt[x] = cnt[x] + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cnt[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, 처음에 배열의 첫 번째 값인 ‘1’이 들어오면, cnt[x] (cnt.1)은 undefined이다.</p><p>cnt[x]가 undefinded이므로 cnt에 key ‘1’를 추가하고 value 1을 세팅해준다. </p><p>이후 다시 ‘1’이 들어오면 cnt[1]은 존재하므로, cnt[1]값 1에 1을 더해준다.</p><hr><h1 id="배열에-1-N-값-세팅하기"><a href="#배열에-1-N-값-세팅하기" class="headerlink" title="배열에 1 ~ N 값 세팅하기"></a>배열에 1 ~ N 값 세팅하기</h1><h3 id="기본-반복문을-이용"><a href="#기본-반복문을-이용" class="headerlink" title="기본 반복문을 이용"></a>기본 반복문을 이용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ES6의-Array-from-and-keys-이용"><a href="#ES6의-Array-from-and-keys-이용" class="headerlink" title="ES6의 Array from() and keys() 이용"></a>ES6의 Array <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from">from()</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys">keys()</a> 이용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(N).keys());</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="Spread를-이용한-방법"><a href="#Spread를-이용한-방법" class="headerlink" title="Spread를 이용한 방법"></a>Spread를 이용한 방법</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [...Array(<span class="number">10</span>).keys()];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="1부터-시작하기-위해-from과-length-property-이용"><a href="#1부터-시작하기-위해-from과-length-property-이용" class="headerlink" title="1부터 시작하기 위해 from과 length property 이용"></a>1부터 시작하기 위해 from과 length property 이용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">10</span>&#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure><h3 id="단순-원하는-길이만큼-0으로-채우기"><a href="#단순-원하는-길이만큼-0으로-채우기" class="headerlink" title="단순 원하는 길이만큼 0으로 채우기"></a>단순 원하는 길이만큼 0으로 채우기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10001</span>).fill(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="https://chlee1001.github.io/categories/Algorithm/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      <category domain="https://chlee1001.github.io/tags/Algorithm/">Algorithm</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/31/JS-Algorithm-1-22-01-31/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Promise</title>
      <link>https://chlee1001.github.io/2022/01/03/JS-ES6-8-22-01-03/</link>
      <guid>https://chlee1001.github.io/2022/01/03/JS-ES6-8-22-01-03/</guid>
      <pubDate>Sun, 02 Jan 2022 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - Promise
&lt;/aside&gt;

&lt;h1 id=&quot;Promises&quot;&gt;&lt;a href=&quot;#Promises&quot; class=&quot;headerlink&quot; title=&quot;Promises&quot;&gt;&lt;/a&gt;Promises&lt;/h1&gt;&lt;h2 id=&quot;async&quot;&gt;&lt;a href=&quot;#async&quot; class=&quot;headerlink&quot; title=&quot;async&quot;&gt;&lt;/a&gt;async&lt;/h2&gt;&lt;p&gt;자바스크립트는 순차적으로 처리되는게 아니라 한꺼번에 실행된다. ⇒ 자바스크립트의 비동기성(async)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - Promise</aside><h1 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h1><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>자바스크립트는 순차적으로 처리되는게 아니라 한꺼번에 실행된다. ⇒ 자바스크립트의 비동기성(async)</p><p>이벤트 루프에서 비동기적으로 실행시킨다.</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타낸다.</p><p>내가 아직 모르는 값이랑 같이 일하게 해준다</p><p>금방 끝나진 않겠지만 곧 오면 이걸 가지고 작업할 게 표시 해주는 것</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseTest1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;Test Pass&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(console.log, 1000, promiseTest1);</span></span><br><span class="line">promiseTest1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseTest1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(reject, <span class="number">3000</span>, <span class="string">&quot;Test Fail&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(console.log, 1000, promiseTest1);</span></span><br><span class="line">promiseTest1</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure><h2 id="Chaining-Promise"><a href="#Chaining-Promise" class="headerlink" title="Chaining Promise"></a>Chaining Promise</h2><p>.then().then()…. 할때 리턴 필요</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseTest2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promiseTest2</span><br><span class="line">  .then(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">otherNumber</span>) =&gt;</span> <span class="built_in">console</span>.log(otherNumber * <span class="number">2</span>)); </span><br></pre></td></tr></table></figure><h2 id="Propmise-all"><a href="#Propmise-all" class="headerlink" title="Propmise.all"></a>Propmise.all</h2><p>Promise.all은 주어진 모든 Promise를 실행한 후 진행되는 하나의 Promise를 반환한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise.all</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">5000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> motherPromise = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line"></span><br><span class="line">motherPromise</span><br><span class="line">  .then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">console</span>.log(values))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 프로미스가 resolve 해야지 출력</span></span><br><span class="line"><span class="comment">// 5초후 마지막 first 끝나야 최종출력</span></span><br><span class="line"><span class="comment">// 중간에 reject 뜨면 바로 중단</span></span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>기본적으로 promise all이랑 같지만 하나만 resolve 되거나 reject하면 된다. 가장 빨리 리턴 되는 걸로 결정, 부모프로미스를 차지하고 그 값 하나 리턴함</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise.race</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> motherPromise2 = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br><span class="line"></span><br><span class="line"> motherPromise2</span><br><span class="line">   .then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">console</span>.log(values))</span><br><span class="line">   .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// second</span></span><br></pre></td></tr></table></figure><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>뭘하든 마지막에 실행된다. 보통 작업이 다 끝나고 로딩 끝낼 때 쓴다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finally</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m done&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/03/JS-ES6-8-22-01-03/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - For</title>
      <link>https://chlee1001.github.io/2022/01/02/JS-ES6-7-22-01-02/</link>
      <guid>https://chlee1001.github.io/2022/01/02/JS-ES6-7-22-01-02/</guid>
      <pubDate>Sun, 02 Jan 2022 10:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - For
&lt;/aside&gt;

&lt;h1 id=&quot;For&quot;&gt;&lt;a href=&quot;#For&quot; class=&quot;headerlink&quot; title=&quot;For&quot;&gt;&lt;/a&gt;For&lt;/h1&gt;&lt;h2 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;headerlink&quot; title=&quot;forEach&quot;&gt;&lt;/a&gt;forEach&lt;/h2&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; friends = [&lt;span class=&quot;string&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;you&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;nico&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; addHeart = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;current, index, array &lt;/span&gt;) =&amp;gt;&lt;/span&gt; ( &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(current, index, array));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;friends.forEach(addHeart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 파라미터 첫번째로 값을 주고 두번째로 인덱스를 주고 세번째로 현재 배열을 준다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// me 0 [&amp;quot;me&amp;quot;, &amp;quot;you&amp;quot;, &amp;quot;nico&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// you 1 [&amp;quot;me&amp;quot;, &amp;quot;you&amp;quot;, &amp;quot;nico&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// nico 2 [&amp;quot;me&amp;quot;, &amp;quot;you&amp;quot;, &amp;quot;nico&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - For</aside><h1 id="For"><a href="#For" class="headerlink" title="For"></a>For</h1><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> friends = [<span class="string">&quot;me&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;nico&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addHeart = <span class="function">(<span class="params">current, index, array </span>) =&gt;</span> ( <span class="built_in">console</span>.log(current, index, array));</span><br><span class="line"></span><br><span class="line">friends.forEach(addHeart);</span><br><span class="line"><span class="comment">// 파라미터 첫번째로 값을 주고 두번째로 인덱스를 주고 세번째로 현재 배열을 준다</span></span><br><span class="line"><span class="comment">// me 0 [&quot;me&quot;, &quot;you&quot;, &quot;nico&quot;]</span></span><br><span class="line"><span class="comment">// you 1 [&quot;me&quot;, &quot;you&quot;, &quot;nico&quot;]</span></span><br><span class="line"><span class="comment">// nico 2 [&quot;me&quot;, &quot;you&quot;, &quot;nico&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> friend <span class="keyword">of</span> friends) &#123;</span><br><span class="line">  <span class="comment">// 장점 1) const, let 뭐로 할건지 결정가능, forEach에서는 안됨</span></span><br><span class="line">  <span class="built_in">console</span>.log(friend); <span class="comment">// 모두다 출력됨</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> <span class="string">&quot;strings&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(char); <span class="comment">// s t r i n g s 출력</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 장점 2) iterable한 모든것에서 작동한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> friend <span class="keyword">of</span> friends) &#123;</span><br><span class="line">  <span class="keyword">if</span> (friend === <span class="string">&quot;steve&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(char); <span class="comment">// &quot;me&quot;, &quot;you&quot;, &quot;nico&quot; 이렇게만 출력</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 장점 3) 루프를 멈출수가있음!, 최고장점</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/02/JS-ES6-7-22-01-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Rest and Spread</title>
      <link>https://chlee1001.github.io/2022/01/02/JS-ES6-6-22-01-02/</link>
      <guid>https://chlee1001.github.io/2022/01/02/JS-ES6-6-22-01-02/</guid>
      <pubDate>Sun, 02 Jan 2022 09:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - Rest &amp; Spread
&lt;/aside&gt;

&lt;h1 id=&quot;Rest-and-Spread&quot;&gt;&lt;a href=&quot;#Rest-and-Spread&quot; class=&quot;headerlink&quot; title=&quot;Rest and Spread&quot;&gt;&lt;/a&gt;Rest and Spread&lt;/h1&gt;&lt;h2 id=&quot;Spread&quot;&gt;&lt;a href=&quot;#Spread&quot; class=&quot;headerlink&quot; title=&quot;Spread&quot;&gt;&lt;/a&gt;Spread&lt;/h2&gt;&lt;p&gt;기본적으로 변수를 가져와 풀어 해쳐 전개해놓는 것.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - Rest & Spread</aside><h1 id="Rest-and-Spread"><a href="#Rest-and-Spread" class="headerlink" title="Rest and Spread"></a>Rest and Spread</h1><h2 id="Spread"><a href="#Spread" class="headerlink" title="Spread"></a>Spread</h2><p>기본적으로 변수를 가져와 풀어 해쳐 전개해놓는 것.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> friends = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(friends); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(...friends); <span class="comment">// 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> family = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(friends + family); <span class="comment">// 1,2,3,4a,b,c</span></span><br><span class="line"><span class="built_in">console</span>.log([friends, family]); <span class="comment">// [ [ 1, 2, 3, 4 ], [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ] ]</span></span><br><span class="line"><span class="built_in">console</span>.log([...friends, ...family]); <span class="comment">// [ 1,   2,   3,   4, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"><span class="comment">// spread를 통해 모든 요소를 담고 있는 하나의 object를 얻을 수 있다.</span></span><br><span class="line"><span class="comment">// array.push()를 이용하지 않고 값을 추가하여 새로운 객체를 만든다.</span></span><br><span class="line"><span class="keyword">const</span> newFriends = [...friends, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(newFriends); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> admin = &#123;</span><br><span class="line">  username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...admin, <span class="attr">password</span>: <span class="number">123</span> &#125;); <span class="comment">// &#123; username: &#x27;admin&#x27;, password: 123 &#125;</span></span><br><span class="line"><span class="comment">// 조건식</span></span><br><span class="line"><span class="comment">// lastName을 입력받았을 때 값이 있을 때만 객체에 넣어주기</span></span><br><span class="line"><span class="keyword">const</span> lastName = prompt(<span class="string">&quot;Last name: &quot;</span>);</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  username: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  ...(lastName !== <span class="string">&quot;&quot;</span> &amp;&amp; &#123; lastName &#125;), <span class="comment">// spread로 전개하려면 데이터가 object여야하므로, 중괄호로 감싸줌</span></span><br><span class="line">  <span class="comment">//   lastName: lastName !== &quot;&quot; ? lastName : undefined,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><h2 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h2><p>끝없는 인자를 받아 볼때 유용하게 이용할 수있다</p><p><code>spread</code>는 죄다 펼쳐 확대시키는 것이고, ****<code>rest</code>는 하나에 담아서 축소시키는것</p><p>어디에 들어가느냐에 따라 spread와 rest(parameter부분에 들어가면 )로 갈릴수있음</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> infiniteArge = <span class="function">(<span class="params">...kimchi</span>) =&gt;</span> <span class="built_in">console</span>.log(kimchi);</span><br><span class="line"></span><br><span class="line">infiniteArge(<span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="string">&quot;lalala&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="comment">// 전부 배열에 넣어서 출력된다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bestFriends = <span class="function">(<span class="params">firstPotato, ...potatos</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`he is <span class="subst">$&#123;firstPotato&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(potatos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bestFriends(<span class="string">&quot;nico&quot;</span>, <span class="string">&quot;lynn&quot;</span>, <span class="string">&quot;steve&quot;</span>, <span class="string">&quot;flynn&quot;</span>);</span><br><span class="line"><span class="comment">// he is nico</span></span><br><span class="line"><span class="comment">// [&quot;lynn&quot;, &quot;steve&quot;, &quot;flynn&quot;]</span></span><br><span class="line"><span class="comment">// 이렇게 출력된다</span></span><br></pre></td></tr></table></figure><h2 id="Rest-Spread-Destructure-Magic"><a href="#Rest-Spread-Destructure-Magic" class="headerlink" title="Rest + Spread + Destructure Magic"></a><strong>Rest + Spread + Destructure Magic</strong></h2><p>object를 지우거나 정리할 때 유용하다</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">name :<span class="string">&quot;nico&quot;</span>,</span><br><span class="line">age:<span class="number">24</span>,</span><br><span class="line">password : <span class="number">12345</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> killPassword = <span class="function">(<span class="params">&#123;password, ...rest&#125;</span>) =&gt;</span> rest; <span class="comment">// destructure + rest</span></span><br><span class="line"><span class="comment">// destructuring을 통해 user의 password를 가져오고, 나머지를 rest에 저장</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cleanUser = killPassword(user)</span><br><span class="line"><span class="built_in">console</span>.log(cleanUser) <span class="comment">// &#123;name:&quot;nico&quot;, age:24&#125; 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setCountry = <span class="function">(<span class="params">&#123; country = <span class="string">&quot;KR&quot;</span>, ...rest &#125;</span>) =&gt;</span> (&#123; country, ...rest &#125;);</span><br><span class="line"><span class="comment">// default 설정 + rest + spread</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setCountry(user));</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;country : &quot;KR&quot;, name :&quot;nico&quot;, age:24, password : 12345&#125; 출력</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/02/JS-ES6-6-22-01-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Destructuring</title>
      <link>https://chlee1001.github.io/2022/01/02/JS-ES6-5-22-01-02/</link>
      <guid>https://chlee1001.github.io/2022/01/02/JS-ES6-5-22-01-02/</guid>
      <pubDate>Sat, 01 Jan 2022 15:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - 비구조화
&lt;/aside&gt;

&lt;h1 id=&quot;Destructuring&quot;&gt;&lt;a href=&quot;#Destructuring&quot; class=&quot;headerlink&quot; title=&quot;Destructuring&quot;&gt;&lt;/a&gt;Destructuring&lt;/h1&gt;&lt;p&gt;destructuring(비구조화)는 object나 array 등 안의 변수를 바깥으로 끄집어내는 것&lt;/p&gt;
&lt;h2 id=&quot;Object-Destructuring&quot;&gt;&lt;a href=&quot;#Object-Destructuring&quot; class=&quot;headerlink&quot; title=&quot;Object Destructuring&quot;&gt;&lt;/a&gt;Object Destructuring&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - 비구조화</aside><h1 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h1><p>destructuring(비구조화)는 object나 array 등 안의 변수를 바깥으로 끄집어내는 것</p><h2 id="Object-Destructuring"><a href="#Object-Destructuring" class="headerlink" title="Object Destructuring"></a>Object Destructuring</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object Destructuring</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  notifications: &#123;</span><br><span class="line">    follow: <span class="literal">true</span>,</span><br><span class="line">    alerts: <span class="literal">true</span>,</span><br><span class="line">    unfollow: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  color: &#123;</span><br><span class="line">    theme: <span class="string">&quot;dakr&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (settingss.notifications.follow) &#123;</span><br><span class="line">  <span class="comment">// send email</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기존에는 위와 같이 사용했다. 보기에 매우 불편하다.</span></span><br><span class="line"><span class="comment">// 만약 follow라는 값이 없느면 undefined오류가 발생할 것이다.</span></span><br></pre></td></tr></table></figure><p>⇒</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기본적으로 settings를 열어 notifications에 접근하여 follow를 가져오는 것</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">notifications</span>: &#123; follow = <span class="literal">false</span> &#125; = &#123;&#125;, color &#125; = settings;</span><br><span class="line"><span class="comment">// settings에 notifications가 없으면 &#123;&#125;, notifications에 follow가 없으면 false로</span></span><br><span class="line"><span class="comment">// default 값 세팅을 해준다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(follow); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">// &#123; theme: &#x27;dark&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이 때 notifications는 변수가 아님 -&gt; notifications를 console.log에 찍으면 is not defined 오류 발생</span></span><br><span class="line"><span class="comment">// 이런 방식은 큰 Object에서 특정 변수나 그 안에 속한 작은 Object에 접근할 수 있도록 해주는 것</span></span><br><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure><h2 id="Array-Destructuring"><a href="#Array-Destructuring" class="headerlink" title="Array Destructuring"></a>Array Destructuring</h2><p>array destructuring은 보통 가져온 정보를 조작하기 않을 때 쓰기 좋다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array Destructuring</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> days = [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [mon, tue, wed, , , , sun, aaa = <span class="string">&quot;AAA&quot;</span>] = days; <span class="comment">// ,,,은 skippin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mon 에는 &quot;Mon&quot; , tue에는 &quot;Tue&quot;, wed 에는 &quot;Wed&quot; sun에는 &quot;Sun&quot;이 들어가있음</span></span><br><span class="line"><span class="comment">// aaa는 AAA</span></span><br><span class="line"><span class="built_in">console</span>.log(sun);</span><br></pre></td></tr></table></figure><h2 id="Renaming"><a href="#Renaming" class="headerlink" title="Renaming"></a>Renaming</h2><p>api등에서 받아온 데이터의 이름이 별로일 때 바꿔보자</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Renaming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  color: &#123;</span><br><span class="line">    chosen_color: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  color: &#123; <span class="attr">chosen_color</span>: chosenColor = <span class="string">&quot;light&quot;</span> &#125;,</span><br><span class="line">&#125; = settings;</span><br><span class="line"><span class="comment">// :를 붙혀 새로운 변수를 생성하고 그 변수에 값을 담는다.</span></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chosenColor = <span class="string">&quot;blue&quot;</span>; <span class="comment">// 변수가 미리 있다면</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chosenColor); <span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line">(&#123;</span><br><span class="line">  color: &#123; <span class="attr">chosen_color</span>: chosenColor = <span class="string">&quot;light&quot;</span> &#125;,</span><br><span class="line">&#125; = settings);</span><br><span class="line"><span class="comment">// 위와 같이 적어 이미 정의가 되어있는 choseColor의 값을 업데이트한다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chosenColor); <span class="comment">// dark</span></span><br></pre></td></tr></table></figure><h2 id="Function-Destructuring"><a href="#Function-Destructuring" class="headerlink" title="Function Destructuring"></a>Function Destructuring</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function Destructuring</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveSettings</span>(<span class="params">followAlert, unfollowAlert, mrkAlert, themeColor</span>) </span>&#123;&#125; <span class="comment">// argument가 너무 길다</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveSettings</span>(<span class="params">&#123; follow, alert, color = <span class="string">&quot;blue&quot;</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(color); <span class="comment">// green</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saveSettings(&#123;</span><br><span class="line">  follow: <span class="literal">true</span>,</span><br><span class="line">  alert: <span class="literal">true</span>,</span><br><span class="line">  mkt: <span class="literal">true</span>,</span><br><span class="line">  color: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">----------- 더 간단히..</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveSettings</span>(<span class="params">&#123; notifications, color: &#123; theme = <span class="string">&quot;blue&quot;</span> &#125; = &#123;&#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(theme); <span class="comment">// blue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saveSettings(&#123;</span><br><span class="line">  notifications: &#123;</span><br><span class="line">    follow: <span class="literal">true</span>,</span><br><span class="line">    alert: <span class="literal">true</span>,</span><br><span class="line">    mkt: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//   color: &#123; theme: &quot;green&quot; &#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Value-shorthands"><a href="#Value-shorthands" class="headerlink" title="Value shorthands"></a>Value shorthands</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> follow = checkFollow();</span><br><span class="line"><span class="keyword">const</span> alert = checkAlert();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  notifications: &#123;</span><br><span class="line">    follow: follow,</span><br><span class="line">    alert: alert,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 아래 같다. key와 value가 같다면...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">    notifications:&#123;</span><br><span class="line">        follow,</span><br><span class="line">        alert</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/02/JS-ES6-5-22-01-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Array</title>
      <link>https://chlee1001.github.io/2022/01/01/JS-ES6-4-22-01-01/</link>
      <guid>https://chlee1001.github.io/2022/01/01/JS-ES6-4-22-01-01/</guid>
      <pubDate>Sat, 01 Jan 2022 06:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - 배열
&lt;/aside&gt;

&lt;h1 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h1&gt;&lt;h3 id=&quot;Array-of&quot;&gt;&lt;a href=&quot;#Array-of&quot; class=&quot;headerlink&quot; title=&quot;Array.of()&quot;&gt;&lt;/a&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;무엇이든 Array로 만들어준다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - 배열</aside><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a><strong>Array.of()</strong></h3><p>무엇이든 Array로 만들어준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.of()</span></span><br><span class="line"><span class="keyword">const</span> alphabet = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> alphabet = <span class="built_in">Array</span>.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)<span class="keyword">const</span> alphabet = <span class="built_in">Array</span>.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);;</span><br><span class="line"><span class="built_in">console</span>.log(alphabet);</span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a><strong>Array.from()</strong></h3><p>Array.from(array같이 생긴 것)</p><p>😠 <code>querySelector</code>나 <code>getElementbyClassName</code>으로 엘리먼트 찾으면 array 같지만 아닌 다른 저장 포맷으로 저장된다</p><p><code>array-like object</code>를 array로 바꿔준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buttons = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buttons);</span><br><span class="line"><span class="comment">// buttons는 Array가 아니기 때문에</span></span><br><span class="line"><span class="comment">// 아래와 같이 forEach를 사용할 수 없다.</span></span><br><span class="line">buttons.forEach(<span class="function">(<span class="params">button</span>) =&gt;</span> &#123;</span><br><span class="line">  button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;I ve been clickeds&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">----------------</span><br><span class="line"><span class="built_in">Array</span>.from(buttons).forEach(<span class="function">(<span class="params">button</span>) =&gt;</span> &#123;</span><br><span class="line">  button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;I ve been clickeds&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find()"></a>Array.find()</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find() - JavaScript | MDN</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.find()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> friends = [</span><br><span class="line">  <span class="string">&quot;nico@gmail.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lynn@naver.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dal@yahoo.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dal2@yahoo.com&quot;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target1 = friends.find(<span class="function">(<span class="params">friend</span>) =&gt;</span> friend.includes(<span class="string">&quot;@yahoo.com&quot;</span>));</span><br><span class="line"><span class="comment">// 조건을 넣어주면 forEach를 돌리면서 그에 맞는 값을 리턴해준다</span></span><br><span class="line"><span class="comment">// 찾은 첫번째 값만 반환해준다</span></span><br><span class="line"><span class="comment">// 없으면 undefined반환한다</span></span><br><span class="line"><span class="built_in">console</span>.log(target1);</span><br></pre></td></tr></table></figure><h3 id="Array-findIndex"><a href="#Array-findIndex" class="headerlink" title="Array.findIndex()"></a>Array.findIndex()</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">Array.prototype.findIndex() - JavaScript | MDN</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.findIndex()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> target2 = friends.findIndex(<span class="function">(<span class="params">friend</span>) =&gt;</span> friend.includes(<span class="string">&quot;@yahoo.com&quot;</span>));</span><br><span class="line"><span class="comment">// 인덱스가 필요할때!</span></span><br><span class="line"><span class="comment">// 없으면 -1반환한다</span></span><br><span class="line"><span class="built_in">console</span>.log(target2);</span><br><span class="line"><span class="keyword">const</span> userName = friends[target2].split(<span class="string">&quot;@&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> email = <span class="string">&quot;yahoo.com&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;userName&#125;</span>@<span class="subst">$&#123;email&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="Array-fill"><a href="#Array-fill" class="headerlink" title="Array.fill()"></a>Array.fill()</h3><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">Array.prototype.fill() - JavaScript | MDN</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (target2 !== -<span class="number">1</span>) &#123;</span><br><span class="line">  friends.fill(<span class="string">&quot;*&quot;</span>.repeat(<span class="number">5</span>), target2 + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// target부터 모든 변수는 다 채울값으로 채워줌</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(friends);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/01/JS-ES6-4-22-01-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Strings</title>
      <link>https://chlee1001.github.io/2022/01/01/JS-ES6-3-22-01-01/</link>
      <guid>https://chlee1001.github.io/2022/01/01/JS-ES6-3-22-01-01/</guid>
      <pubDate>Sat, 01 Jan 2022 05:50:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - 문자열
&lt;/aside&gt;

&lt;h1 id=&quot;Strings&quot;&gt;&lt;a href=&quot;#Strings&quot; class=&quot;headerlink&quot; title=&quot;Strings&quot;&gt;&lt;/a&gt;Strings&lt;/h1&gt;&lt;h2 id=&quot;Template-Literal&quot;&gt;&lt;a href=&quot;#Template-Literal&quot; class=&quot;headerlink&quot; title=&quot;Template Literal&quot;&gt;&lt;/a&gt;Template Literal&lt;/h2&gt;&lt;p&gt;variable을 가진 문자열을 쓰는 방법에 대한 개선&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - 문자열</aside><h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><h2 id="Template-Literal"><a href="#Template-Literal" class="headerlink" title="Template Literal"></a>Template Literal</h2><p>variable을 가진 문자열을 쓰는 방법에 대한 개선</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHi = <span class="function">(<span class="params">aName = <span class="string">&quot;anon&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + aName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 변수</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="function">(<span class="params">aName = <span class="string">&quot;anon&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;aName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 함수</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello how are you <span class="subst">$&#123;add(<span class="number">6</span>, <span class="number">6</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="HTML-Fragments-1"><a href="#HTML-Fragments-1" class="headerlink" title="HTML Fragments 1"></a>HTML Fragments 1</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wrapper = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.wrapper&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addWelcome = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> h1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">  h1.innerText = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">  div.append(h1);</span><br><span class="line">  wrapper.append(div);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(addWelcome, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>⇒</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addWelcome = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;hello&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Hello&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  wrapper.innerHTML = div;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>template literal은 ``` … space를 고려한다.</li></ul><h3 id="HTML-Fragments-2"><a href="#HTML-Fragments-2" class="headerlink" title="HTML Fragments 2"></a>HTML Fragments 2</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alphas = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.createElement(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> list = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Alphabet&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;alphas.map(alpha =&gt; <span class="string">`&lt;li&gt;<span class="subst">$&#123;alpha&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">&quot;&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">wrapper.innerHTML = list;</span><br></pre></td></tr></table></figure><h3 id="Cloning-Styled-Components"><a href="#Cloning-Styled-Components" class="headerlink" title="Cloning Styled Components"></a>Cloning Styled Components</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cloning Styled Components</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styled = <span class="function">(<span class="params">aElement</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(aElement);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> styles = args[<span class="number">0</span>];</span><br><span class="line">    el.style = styles;</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래 코드는 함수를 두변 연속 호출 하는 꼴이기 때문에</span></span><br><span class="line"><span class="comment">// 위 함수에서 클로저로 함수를 또 한번 호출할 필요가 있다.</span></span><br><span class="line"><span class="keyword">const</span> title = styled(<span class="string">&quot;h1&quot;</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: red;</span></span><br><span class="line"><span class="string">  color: blue;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subTitle = styled(<span class="string">&quot;span&quot;</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  color: green;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">title.innerText = <span class="string">&quot;We just cloned&quot;</span>;</span><br><span class="line">subTitle.innerText = <span class="string">&quot;Styled Components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.append(title, subTitle);</span><br></pre></td></tr></table></figure><h3 id="More-String-Improvements"><a href="#More-String-Improvements" class="headerlink" title="More String Improvements"></a>More String Improvements</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * includes()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isEmail = <span class="function">(<span class="params">email</span>) =&gt;</span> email.includes(<span class="string">&quot;@&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isEmail(<span class="string">&quot;myEmail@google.com&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmail(<span class="string">&quot;myEmail&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * repeat()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> CC_NUMBER = <span class="string">&quot;6060&quot;</span>; <span class="comment">// ************6060로 보여주기</span></span><br><span class="line"><span class="keyword">const</span> displayName = <span class="string">`<span class="subst">$&#123;<span class="string">&quot;*&quot;</span>.repeat(<span class="number">10</span>)&#125;</span><span class="subst">$&#123;CC_NUMBER&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(displayName); <span class="comment">// **********6060</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * startsWith(), endsWith()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Mr. abc&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.startsWith(<span class="string">&quot;Mr&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(name.endsWith(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/01/JS-ES6-3-22-01-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Functions</title>
      <link>https://chlee1001.github.io/2022/01/01/JS-ES6-2-22-01-01/</link>
      <guid>https://chlee1001.github.io/2022/01/01/JS-ES6-2-22-01-01/</guid>
      <pubDate>Sat, 01 Jan 2022 04:20:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - 함수
&lt;/aside&gt;

&lt;h1 id=&quot;Functions&quot;&gt;&lt;a href=&quot;#Functions&quot; class=&quot;headerlink&quot; title=&quot;Functions&quot;&gt;&lt;/a&gt;Functions&lt;/h1&gt;&lt;h3 id=&quot;Arrow-Functions&quot;&gt;&lt;a href=&quot;#Arrow-Functions&quot; class=&quot;headerlink&quot; title=&quot;Arrow Functions&quot;&gt;&lt;/a&gt;Arrow Functions&lt;/h3&gt;&lt;p&gt;기존 함수의 모습을 개선했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - 함수</aside><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><h3 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h3><p>기존 함수의 모습을 개선했다.</p><p><strong>기존 함수</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Hello());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;kim&quot;</span>, <span class="string">&quot;lee&quot;</span>, <span class="string">&quot;park&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hearts = names.map(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + <span class="string">&quot; ❤️&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(hearts);</span><br></pre></td></tr></table></figure><p>Arrow Functions(1) - base</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Hello());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;kim&quot;</span>, <span class="string">&quot;lee&quot;</span>, <span class="string">&quot;park&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hearts = names.map(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> name + <span class="string">&quot; ❤️&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(hearts);</span><br></pre></td></tr></table></figure><p>Arrow Functions(2) - implicit return</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Hello());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;kim&quot;</span>, <span class="string">&quot;lee&quot;</span>, <span class="string">&quot;park&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hearts = names.map(<span class="function"><span class="params">name</span> =&gt;</span> name + <span class="string">&quot; ❤️&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hearts);</span><br></pre></td></tr></table></figure><h3 id="this-in-Arrow-Functions-Event-listener-in-arrow-function"><a href="#this-in-Arrow-Functions-Event-listener-in-arrow-function" class="headerlink" title="this in Arrow Functions (Event listener in arrow function)"></a><code>this</code> in Arrow Functions (Event listener in arrow function)</h3><p>일반 콜백 함수안에서 <code>this</code>는 이벤트리스너에 연결 된 엘리먼트를 가리킨다. 하지만, arrow function안에서 <code>this</code>는 window를 가리킨다.</p><p>결론, this를 함수 안에 익명함수로 사용할 때는 Arrow Function이 아닌 일반 표준 funtion 형태로 사용해야한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thisTest = &#123;</span><br><span class="line">  cnt: <span class="number">0</span>,</span><br><span class="line">  <span class="function"><span class="title">addCnt</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cnt++;</span><br><span class="line">  &#125;,</span><br><span class="line">  addCnt2: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cnt++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(thisTest.cnt); <span class="comment">// 0</span></span><br><span class="line">thisTest.addCnt();</span><br><span class="line"><span class="built_in">console</span>.log(thisTest.cnt); <span class="comment">// 1</span></span><br><span class="line">thisTest.addCnt2;</span><br><span class="line"><span class="built_in">console</span>.log(thisTest.cnt); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="Default-Values"><a href="#Default-Values" class="headerlink" title="Default Values"></a>Default Values</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHi = <span class="function">(<span class="params">aName = <span class="string">&quot;anon&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;aName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sayHi());</span><br><span class="line"><span class="built_in">console</span>.log(sayHi(<span class="string">&#x27;chaehyeon&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2022/01/01/JS-ES6-2-22-01-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Variables</title>
      <link>https://chlee1001.github.io/2021/12/30/JS-ES6-1-22-01-01/</link>
      <guid>https://chlee1001.github.io/2021/12/30/JS-ES6-1-22-01-01/</guid>
      <pubDate>Thu, 30 Dec 2021 06:26:50 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - 변수
&lt;/aside&gt;

&lt;h1 id=&quot;Variables&quot;&gt;&lt;a href=&quot;#Variables&quot; class=&quot;headerlink&quot; title=&quot;Variables&quot;&gt;&lt;/a&gt;Variables&lt;/h1&gt;&lt;h3 id=&quot;Let-and-Const&quot;&gt;&lt;a href=&quot;#Let-and-Const&quot; class=&quot;headerlink&quot; title=&quot;Let and Const&quot;&gt;&lt;/a&gt;Let and Const&lt;/h3&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt;를 절대 사용하지 않고 &lt;code&gt;let &amp;amp; const&lt;/code&gt; 사용하기&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - 변수</aside><h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><h3 id="Let-and-Const"><a href="#Let-and-Const" class="headerlink" title="Let and Const"></a>Let and Const</h3><p><code>var</code>를 절대 사용하지 않고 <code>let &amp; const</code> 사용하기</p><ul><li><p><code>var</code>를 쓰면 안되는 이유</p><ul><li><pre><code>var hoisting</code></pre><p> 때문에…</p><ul><li>var는 라이프사이클에서… 선언과 초기화를 동시에 한다.</li><li>global scope에 변수/함수를 선언할 경우 <strong>아무리 아래에 선언해도 제일 위로 올라간다. → 어디서 선언했든 상관없이, 항상 제일 위로 선언을 끌어올려준다.</strong></li><li>block scope를 철저히 무시한다.</li></ul></li></ul><p>⇒ 이러한 유연성으로 작은 어플리케이션을 금방 만들 수 있지만, 프로젝트의 규모가 커지면서 나중에서는 선언하지도 않은 값이 멋대로 출력되거나, 개발자들간의 협업에서 여러가지 문제점이 생길 수 있다.</p></li><li><p><code>let</code>은 선언과 초기화가 분리되어 그 사이에 TDZ가 생성되고, 접근할 경우 Reference Error가 발생한다.</p></li><li><p><code>const</code>는 선언과 초기화가 동시에 진행되지만, 선언 이전에 TDZ가 생성되어 접근하면 Reference Error가 발생한다.</p><h3 id="Dead-Zone"><a href="#Dead-Zone" class="headerlink" title="Dead Zone"></a>Dead Zone</h3><p>temporal dead zone(TDZ)에 영향을 받는 구문은 크게..</p><ul><li>const 변수</li><li>let 변수</li><li>class 구문</li><li>constructor() 내부의 super()</li><li>기본 함수 매개변수</li></ul></li></ul><h3 id="Block-Scope"><a href="#Block-Scope" class="headerlink" title="Block Scope"></a>Block Scope</h3><p><code>let &amp; const</code>는 block scope {}를 가짐</p><ul><li>외부에서 접근 불가능하다.</li></ul><p><code>var</code>는 function scope를 가짐</p><ul><li>function 안에서 생성 된 var변수는 외부 function에서 접근 할 수 없지만, if/else, for등안에서 생성 된 var는 어디서는 접근 가능하다.</li></ul><h3 id="Immutabe-Data-Types"><a href="#Immutabe-Data-Types" class="headerlink" title="Immutabe Data Types"></a>Immutabe Data Types</h3><p><code>primitive types</code>, <code>frozen objects</code> … 값이 바뀌지 않은 type</p><p>CONSTANTS는 Immutable Data Types이며, 프로그래밍할 때 왠만하면 Immutable Data Types를 사용하자.</p><p>💁🏻‍♀️ <strong>Immutable Data Types을 사용해야 하는 이유</strong></p><ul><li>security 해커들이 코드의 값을 바꾸는 것을 방지한다.</li><li>thread safety 어플리케이션을 실행하면 한가지의 프로세스가 할당되고, 그 프로세스 안에서 다양한 thread가 동시에 돌아가게 된다.이때 이 다양한 thread가 동시에 변수에 접근해서 값을 변경할 수 있게 되는 위험성이 생기는데, 이것을 방지한다.</li><li>reduce human mistakes 앞으로 해당 코드를 변경할 더 좋은 방안이 없다면, <code>const</code> 를 이용해 작성하여 본인 혹은 다른 개발자가 코드를 변경할때 발생할 수 있는 실수를 방지해준다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Web/">Web</category>
      
      <category domain="https://chlee1001.github.io/categories/Web/Javascript/">Javascript</category>
      
      
      <category domain="https://chlee1001.github.io/tags/JS/">JS</category>
      
      <category domain="https://chlee1001.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://chlee1001.github.io/tags/ES6/">ES6</category>
      
      
      <comments>https://chlee1001.github.io/2021/12/30/JS-ES6-1-22-01-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Ubuntu] Certbot을 이용한 인증서 발급하기</title>
      <link>https://chlee1001.github.io/2021/11/28/UBUNTU-Certbot-21-11-28/</link>
      <guid>https://chlee1001.github.io/2021/11/28/UBUNTU-Certbot-21-11-28/</guid>
      <pubDate>Sun, 28 Nov 2021 11:26:50 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://chae-hyeon.notion.site/Ubuntu-Certbot-9de75d4e532b4243bdf1a67a8504279f&quot;&gt;노션에서 보기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt; 💡 Certbot을 통해 무료로 서버인증서를 발급하고, 자동으로 갱신 가능 &lt;/aside&gt;

&lt;h1 id=&quot;snapd-설치하기-snapd-없는-경우&quot;&gt;&lt;a href=&quot;#snapd-설치하기-snapd-없는-경우&quot; class=&quot;headerlink&quot; title=&quot;snapd 설치하기 (snapd 없는 경우)&quot;&gt;&lt;/a&gt;snapd 설치하기 (snapd 없는 경우)&lt;/h1&gt;&lt;p&gt;최신 버전의 우분투에는 snapd가 설치되어있는 것으로 알고 있음&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://chae-hyeon.notion.site/Ubuntu-Certbot-9de75d4e532b4243bdf1a67a8504279f">노션에서 보기</a></p><p><em>이채현</em></p><aside> 💡 Certbot을 통해 무료로 서버인증서를 발급하고, 자동으로 갱신 가능 </aside><h1 id="snapd-설치하기-snapd-없는-경우"><a href="#snapd-설치하기-snapd-없는-경우" class="headerlink" title="snapd 설치하기 (snapd 없는 경우)"></a>snapd 설치하기 (snapd 없는 경우)</h1><p>최신 버전의 우분투에는 snapd가 설치되어있는 것으로 알고 있음</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt # snap</span></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt install snapd</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h1 id="certbot-설치하기-snap"><a href="#certbot-설치하기-snap" class="headerlink" title="certbot 설치하기 (snap)"></a>certbot 설치하기 (snap)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install core; sudo snap refresh core</span><br><span class="line">sudo snap install --classic certbot</span><br><span class="line">sudo ln -s /snap/bin/certbot /usr/bin/certbot</span><br></pre></td></tr></table></figure><h1 id="cloudflare-plugin-설치하기"><a href="#cloudflare-plugin-설치하기" class="headerlink" title="cloudflare plugin 설치하기"></a>cloudflare plugin 설치하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dns  cloudflare</span></span><br><span class="line">sudo snap <span class="built_in">set</span> certbot trust-plugin-with-root=ok</span><br><span class="line">sudo snap install certbot-dns-cloudflare</span><br></pre></td></tr></table></figure><h1 id="cloudflare-api-token-넣기"><a href="#cloudflare-api-token-넣기" class="headerlink" title="cloudflare api token 넣기"></a>cloudflare api token 넣기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.secrets/certbot</span><br><span class="line">vi ~/.secrets/certbot/cloudflare.ini</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="comment"># Cloudflare API token used by Certbot</span></span><br><span class="line">dns_cloudflare_api_token = IdgrE2pGEQxdq43kQPJ8*****************</span><br><span class="line">chmod 600 ~/.secrets/certbot/cloudflare.ini</span><br></pre></td></tr></table></figure><h1 id="자신의-도메인-인증서-등록하기"><a href="#자신의-도메인-인증서-등록하기" class="headerlink" title="자신의 도메인 인증서 등록하기"></a>자신의 도메인 인증서 등록하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># *.4084.live</span></span><br><span class="line">sudo certbot certonly --dns-cloudflare \\</span><br><span class="line">   --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini \\</span><br><span class="line">   -d *.4084.live</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">ubuntu@dev-project-app:~$ sudo certbot certonly --dns-cloudflare \\</span><br><span class="line">&gt;    --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini \\</span><br><span class="line">&gt;    -d *.4084.live</span><br><span class="line">Saving debug <span class="built_in">log</span> to /var/<span class="built_in">log</span>/letsencrypt/letsencrypt.log</span><br><span class="line">Enter email address (used <span class="keyword">for</span> urgent renewal and security notices)</span><br><span class="line"> (Enter <span class="string">&#x27;c&#x27;</span> to cancel): ----@gmail.com</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please <span class="built_in">read</span> the Terms of Service at</span><br><span class="line">&lt;https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf&gt;. You must</span><br><span class="line">agree <span class="keyword">in</span> order to register with the ACME server. Do you agree?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: Y</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Would you be willing, once your first certificate is successfully issued, to</span><br><span class="line">share your email address with the Electronic Frontier Foundation, a founding</span><br><span class="line">partner of the Let<span class="string">&#x27;s Encrypt project and the non-profit organization that</span></span><br><span class="line"><span class="string">develops Certbot? We&#x27;</span>d like to send you email about our work encrypting the web,</span><br><span class="line">EFF news, campaigns, and ways to support digital freedom.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: Y</span><br><span class="line">Account registered.</span><br><span class="line">Requesting a certificate <span class="keyword">for</span> *.4084.live</span><br><span class="line">Waiting 10 seconds <span class="keyword">for</span> DNS changes to propagate</span><br><span class="line"></span><br><span class="line">Successfully received certificate.</span><br><span class="line">Certificate is saved at: /etc/letsencrypt/live/4084.live/fullchain.pem</span><br><span class="line">Key is saved at:         /etc/letsencrypt/live/4084.live/privkey.pem</span><br><span class="line">This certificate expires on 2022-02-26.</span><br><span class="line">These files will be updated when the certificate renews.</span><br><span class="line">Certbot has <span class="built_in">set</span> up a scheduled task to automatically renew this certificate <span class="keyword">in</span> the background.</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">If you like Certbot, please consider supporting our work by:</span><br><span class="line"> * Donating to ISRG / Let<span class="string">&#x27;s Encrypt:   &lt;https://letsencrypt.org/donate&gt;</span></span><br><span class="line"><span class="string"> * Donating to EFF:                    &lt;https://eff.org/donate-le&gt;</span></span><br><span class="line"><span class="string">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span></span><br></pre></td></tr></table></figure><p>생성된 인증서 경로 /etc/letsencrypt/live/4084.live/fullchain.pem /etc/letsencrypt/live/4084.live/privkey.pem</p><h1 id="인증서-갱신하기"><a href="#인증서-갱신하기" class="headerlink" title="인증서 갱신하기"></a>인증서 갱신하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#     (--dry-run)</span></span><br><span class="line">sudo certbot renew --dry-run</span><br><span class="line"></span><br><span class="line"><span class="comment">#(xx )</span></span><br><span class="line">sudo certbot renew</span><br></pre></td></tr></table></figure><h1 id="crontab을-이용하여-주기적으로-갱신"><a href="#crontab을-이용하여-주기적으로-갱신" class="headerlink" title="crontab을 이용하여 주기적으로 갱신"></a>crontab을 이용하여 주기적으로 갱신</h1><p>(매주 일요일 2시 1분에 실행)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">-----------</span><br><span class="line"><span class="comment"># cert renewal</span></span><br><span class="line">1 2 * * 0 sudo /usr/bin/certbot renew</span><br></pre></td></tr></table></figure><p>참고링크</p><hr><ul><li><a href="https://letsencrypt.org/">Let’s Encrypt (letsencrypt.org)</a></li><li><a href="https://certbot.eff.org/">https://certbot.eff.org/</a></li><li><a href="https://eff-certbot.readthedocs.io/en/stable/using.html">User Guide — Certbot 1.15.0.dev0 documentation (eff.org)</a></li><li><a href="https://certbot-dns-cloudflare.readthedocs.io/en/stable/">https://certbot-dns-cloudflare.readthedocs.io/en/stable/</a></li><li><a href="https://eff-certbot.readthedocs.io/en/stable/using.html#dns-plugins">User Guide — Certbot 1.15.0.dev0 documentation (eff.org)</a></li><li><a href="https://levelup.gitconnected.com/how-to-install-ssl-certificate-for-nginx-server-in-amazon-linux-2986f51371fb">How to install SSL certificate for Nginx server in Amazon Linux | by Sagar Shrestha | Level Up Coding (gitconnected.com)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Linux/">Linux</category>
      
      <category domain="https://chlee1001.github.io/categories/Linux/Ubuntu/">Ubuntu</category>
      
      
      <category domain="https://chlee1001.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://chlee1001.github.io/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://chlee1001.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://chlee1001.github.io/tags/Certbot/">Certbot</category>
      
      <category domain="https://chlee1001.github.io/tags/letsencrypt/">letsencrypt</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9D%B8%EC%A6%9D%EC%84%9C/">인증서</category>
      
      
      <comments>https://chlee1001.github.io/2021/11/28/UBUNTU-Certbot-21-11-28/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Ubuntu] EC2 Ubuntu에 접속 후 초기 셋팅</title>
      <link>https://chlee1001.github.io/2021/11/28/UBUNTU-Connect1-21-11-28/</link>
      <guid>https://chlee1001.github.io/2021/11/28/UBUNTU-Connect1-21-11-28/</guid>
      <pubDate>Sun, 28 Nov 2021 09:26:50 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://chae-hyeon.notion.site/Ubuntu-EC2-Ubuntu-c6fd0310dcc8468fac90797ffce9edfd&quot;&gt;노션에서 보기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 키를 이용하여 생성한 EC2 Ubuntu 인스턴스에 접속해보자 (mac os 기준)
&lt;/aside&gt;



&lt;p&gt;&lt;strong&gt;인스턴스를 생성할 때 키페어 생성하여 위치확인하기&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;키-페어-저장&quot;&gt;&lt;a href=&quot;#키-페어-저장&quot; class=&quot;headerlink&quot; title=&quot;키 페어 저장&quot;&gt;&lt;/a&gt;키 페어 저장&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://chae-hyeon.notion.site/Ubuntu-EC2-Ubuntu-c6fd0310dcc8468fac90797ffce9edfd">노션에서 보기</a></p><p><em>이채현</em></p><aside>💡 키를 이용하여 생성한 EC2 Ubuntu 인스턴스에 접속해보자 (mac os 기준)</aside><p><strong>인스턴스를 생성할 때 키페어 생성하여 위치확인하기</strong></p><h1 id="키-페어-저장"><a href="#키-페어-저장" class="headerlink" title="키 페어 저장"></a>키 페어 저장</h1><p>다운로드 한 키페어를 ~/.ssh 폴더 안에 위치시키고 권한을 600으로 변경한다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/Downloads/&#123;keypair-name.pem&#125; ~/.ssh/AWS</span><br><span class="line">chmod 600 &#123;keypair-name.pem&#125;</span><br></pre></td></tr></table></figure><h1 id="접속"><a href="#접속" class="headerlink" title="접속"></a>접속</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ./&#123;keypair-name.pem&#125; ubuntu@&#123;public ipv4 주소&#125;</span><br></pre></td></tr></table></figure><h1 id="로그인-후"><a href="#로그인-후" class="headerlink" title="로그인 후"></a>로그인 후</h1><h2 id="패키지-업데이트"><a href="#패키지-업데이트" class="headerlink" title="패키지 업데이트"></a>패키지 업데이트</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h2 id="hostname-변경"><a href="#hostname-변경" class="headerlink" title="hostname 변경"></a>hostname 변경</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hostnamectl set-hostname &#123;원하는 이름&#125;</span><br><span class="line"><span class="comment"># 재접속</span></span><br></pre></td></tr></table></figure><h2 id="타임존-변경"><a href="#타임존-변경" class="headerlink" title="타임존 변경"></a>타임존 변경</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-timezone Asia/Seoul</span><br></pre></td></tr></table></figure><h1 id="개인PC에서-간단히-접속하기"><a href="#개인PC에서-간단히-접속하기" class="headerlink" title="개인PC에서 간단히 접속하기"></a>개인PC에서 간단히 접속하기</h1><p>ssh명령어를 이용하여 접속할 때에는 인증키의 위치를 계정명, 주소를 같이 입력해줘야하는 번거로움이 있다.</p><p>이를 개인pc의 인증서를 등록하여 인증서없이 바로 로그인해보자</p><h2 id="id-rsa-키-생성하기-개인-Mac"><a href="#id-rsa-키-생성하기-개인-Mac" class="headerlink" title="id_rsa 키 생성하기 (개인-Mac)"></a>id_rsa 키 생성하기 (개인-Mac)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>이후 ~/.ssh 폴더 내부에 생성 된 id_rsa(private) id_rsa.pub(public) 두개의 키를 확인할 수 있다.<br>이 중 id_rsa.pub의 내용을 복사한다.</p><h2 id="authorized-keys-수정하기-원격-Ubuntu"><a href="#authorized-keys-수정하기-원격-Ubuntu" class="headerlink" title="authorized_keys 수정하기 (원격-Ubuntu)"></a>authorized_keys 수정하기 (원격-Ubuntu)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line">위에서 복사한 id_rsa.pub 내용을 붙여넣고 저장한다.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/Linux/">Linux</category>
      
      <category domain="https://chlee1001.github.io/categories/Linux/Ubuntu/">Ubuntu</category>
      
      
      <category domain="https://chlee1001.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://chlee1001.github.io/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://chlee1001.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://chlee1001.github.io/tags/Mac/">Mac</category>
      
      <category domain="https://chlee1001.github.io/tags/key/">key</category>
      
      <category domain="https://chlee1001.github.io/tags/id-rsa/">id_rsa</category>
      
      
      <comments>https://chlee1001.github.io/2021/11/28/UBUNTU-Connect1-21-11-28/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021년 08월 30일 월요일 IT뉴스</title>
      <link>https://chlee1001.github.io/2021/08/30/21-08-30-IT_News/</link>
      <guid>https://chlee1001.github.io/2021/08/30/21-08-30-IT_News/</guid>
      <pubDate>Mon, 30 Aug 2021 14:00:19 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-미래기술25-네이버-카카오…기업들도-다-뛰어들었다&quot;&gt;&lt;a href=&quot;#1-미래기술25-네이버-카카오…기업들도-다-뛰어들었다&quot; class=&quot;headerlink&quot; title=&quot;1. [미래기술25]네이버, 카카오…기업들도 다 뛰어들었다&quot;&gt;&lt;/a&gt;1. [미래기술25]네이버, 카카오…기업들도 다 뛰어들었다&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://news.naver.com/main/read.naver?mode=LSD&amp;mid=shm&amp;sid1=105&amp;oid=018&amp;aid=0005023921&quot;&gt;[미래기술25]네이버, 카카오…기업들도 다 뛰어들었다&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgnews.pstatic.net/image/018/2021/08/30/0005023921_001_20210830221903953.jpg?type=w647&quot; alt=&quot;[이데일리 이미나 기자]&quot;&gt;&lt;/p&gt;
&lt;p&gt;국내 대표 인터넷·IT서비스 기업들도 블록체인 시장에 앞다퉈 뛰어들고 있으며, 시장조사 업체 마켓앤마켓에 따르면 지난해 30억 달러(3조5070억원)였던 글로벌 블록체인 시장 규모는 매년 67.3%씩 커져 오는 2025년 397억달러(46조4093억원)에 이를 전망입니다.&lt;/p&gt;
&lt;p&gt;가장 활발한 움직임을 보이는 기업은 카카오로  최근 싱가포르에 블록체인 자회사 ‘크러스트’를 설립하며 글로벌 사업을 본격화했으며, 이뿐만 아니라 그라운드X는 대체 불가능 토큰(NFT) 사업에 공을 들이고 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="1-미래기술25-네이버-카카오…기업들도-다-뛰어들었다"><a href="#1-미래기술25-네이버-카카오…기업들도-다-뛰어들었다" class="headerlink" title="1. [미래기술25]네이버, 카카오…기업들도 다 뛰어들었다"></a>1. [미래기술25]네이버, 카카오…기업들도 다 뛰어들었다</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=018&aid=0005023921">[미래기술25]네이버, 카카오…기업들도 다 뛰어들었다</a></p><p><img src="https://imgnews.pstatic.net/image/018/2021/08/30/0005023921_001_20210830221903953.jpg?type=w647" alt="[이데일리 이미나 기자]"></p><p>국내 대표 인터넷·IT서비스 기업들도 블록체인 시장에 앞다퉈 뛰어들고 있으며, 시장조사 업체 마켓앤마켓에 따르면 지난해 30억 달러(3조5070억원)였던 글로벌 블록체인 시장 규모는 매년 67.3%씩 커져 오는 2025년 397억달러(46조4093억원)에 이를 전망입니다.</p><p>가장 활발한 움직임을 보이는 기업은 카카오로  최근 싱가포르에 블록체인 자회사 ‘크러스트’를 설립하며 글로벌 사업을 본격화했으며, 이뿐만 아니라 그라운드X는 대체 불가능 토큰(NFT) 사업에 공을 들이고 있다.</p><p>네이버 관계사인 라인도 지난 12일 암호화폐 ‘링크’를 국내 거래소(빗썸)에 처음으로 상장시키며 유동성 확대에 나서고 있습니다. 블록체인 생태계 확장의 일환으로 해석됩니다.</p><hr><h2 id="2-“IT기업·전문가-덕-‘’먹통-백신예약-정상화”"><a href="#2-“IT기업·전문가-덕-‘’먹통-백신예약-정상화”" class="headerlink" title="2. “IT기업·전문가 덕 ‘’먹통 백신예약 정상화”"></a>2. “IT기업·전문가 덕 ‘’<code>먹통 백신예약</code> 정상화”</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=029&aid=0002694464">“IT기업·전문가 덕 <code>먹통 백신예약</code> 정상화”</a></p><p>김성훈 한국사회보장정보원 차세대개발본부장은 최근 본보와의 인터뷰에서 “백신 사전예약시스템 개선은 시급성과 기술적 난해함 때문에 군사작전을 방불케 하는 작업이었다”면서 “그러나 기업들이 앞다퉈 최정예 인력들을 보내줬고, 전문가들이 심야 회의와 새벽 퇴근, 주말 반납을 반복해 가며 매달린 덕분에 고도로 복잡한 문제를 풀 수 있었다”고 밝혔다.</p><p>LG CNS는 질병청 시스템 전체를 상세진단한 후 최적화해 성능을 높이고, 쌍용정보통신은 질병청 예약시스템 전체를 개선했다. 한국오라클은 서버 2대를 클러스터링 구조로 연결한 데이터베이스 서버를 5대가 연결된 방식으로 바꿨다. 중소기업 시스템어소시에이츠는 전국을 수배해 서버·스토리지를 조달해 인프라를 확장했다. 와탭랩스와 에스티씨랩도 서버 구조 재배치에 참여했다. 바토스는 데이터베이스 설정작업과 테스트를 통해 문제 없는 가동을 도왔다. 큐본·데이타헤븐·이글로벌시스템은 예약처리 성능과 보안 강화작업을 했다. </p><hr><h2 id="3-‘갤-Z플립3’는-어떻게-2030-앱등이들을-돌려-세웠나"><a href="#3-‘갤-Z플립3’는-어떻게-2030-앱등이들을-돌려-세웠나" class="headerlink" title="3. ‘갤 Z플립3’는 어떻게 2030 앱등이들을 돌려 세웠나"></a>3. ‘갤 Z플립3’는 어떻게 2030 앱등이들을 돌려 세웠나</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=018&aid=0005023918">‘갤 Z플립3’는 어떻게 2030 앱등이들을 돌려 세웠나</a></p><p><strong>아이폰 고집하던 2030도 갤럭시 Z플립3로 전향</strong></p><p>아이폰, 애플워치, 에어팟, 아이패드 등 전자기기를 모두 애플 제품으로 구성하면 다른 브랜드로 넘어가는 게 쉬운 일이 아니다. 애플 제품끼리는 연동이 쉬워 사진 및 동영상 등 데이터를 옮길 때 편리하다.</p><p><strong>폰꾸미기로 2030 겨냥… “나만의 핸드폰을 만드는 기분”</strong></p><p>삼성전자는 갤럭시 Z플립3을 출시하면서 이전 플립 시리즈보다 4배 커진 커버 디스플레이를 강조했으며 커버 디스플레이는 플립을 닫았을 때 외부에 보이는 작은 화면으로 스마트폰을 열지 않고도 알림이나 메시지를 확인할 수 있고 위젯을 활용해 일정과 날씨를 확인할 수 있다. 특히 커버 디스플레이에 GIF 이미지도 적용 가능한 것이 2030이 열광하는 포인트 중 하나다. </p><p>Z플립3 구매자들의 나만의 휴대폰 만들기는 우연이 아닌 기획의 산물이다.</p><hr><h2 id="4-무신사-스타일쉐어·29CM-지분-100-인수-완료…-“브랜드-패션-시장-시너지-강화”"><a href="#4-무신사-스타일쉐어·29CM-지분-100-인수-완료…-“브랜드-패션-시장-시너지-강화”" class="headerlink" title="4. 무신사, 스타일쉐어·29CM 지분 100% 인수 완료… “브랜드 패션 시장 시너지 강화”"></a>4. 무신사, 스타일쉐어·29CM 지분 100% 인수 완료… “브랜드 패션 시장 시너지 강화”</h2><p><a href="https://platum.kr/archives/169979">무신사, 스타일쉐어·29CM 지분 100% 인수 완료… “브랜드 패션 시장 시너지 강화”</a></p><p>무신사는 지난달 7일 스타일쉐어의 지분 전량(100%)을 확보하는 주식매매계약(SPA)과 주식의 포괄적 교환계약을 체결했고 이후 매매 대금 지급을 완료해 최종 인수 절차를 마무리했다. </p><p>스타일쉐어는 무신사 자회사로, 29CM는 완전손자회사로 편입되며 기존 인력은 전원 고용 승계하며 세 플랫폼을 합치지 않고 독립 운영한다.</p><hr><h2 id="5-NHN-2021-게임부문-신입·경력사원-공개-채용"><a href="#5-NHN-2021-게임부문-신입·경력사원-공개-채용" class="headerlink" title="5. NHN, 2021 게임부문 신입·경력사원 공개 채용"></a>5. NHN, 2021 게임부문 신입·경력사원 공개 채용</h2><p><a href="http://www.digitaltoday.co.kr/news/articleView.html?idxno=415167">NHN, 2021 게임부문 신입·경력사원 공개 채용</a></p><p><img src="https://cdn.digitaltoday.co.kr/news/photo/202108/415167_408079_4530.png" alt="NHN, 게임부문 공개채용 이미지[사진:NHN]"></p><p>NHN은 금일부터 9월 14일까지 약 보름간 원서접수를 받고, 이후 서류전형-1차 면접-2차 면접 순으로 전형과정을 진행한다. 이번 게임부문 채용은 NHN, NHN빅풋, NHN픽셀큐브, NHN RPG 등 총 4개 법인으로 구분된다.</p><p>NHN은 지난 4월 진행한 기술 경력 공채에 이어 이번 채용에서도 경력직 부문의 자기소개서 항목을 없애며 입사 절차를 간소화했다. 해외 여행에 결격 사유가 없고, 2022년 2월 졸업 예정자 또는 기졸업자(신입), 또는 게임기획/개발/디자인 경력직이라면 누구나 지원할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/IT%EC%A0%95%EB%B3%B4/">IT정보</category>
      
      <category domain="https://chlee1001.github.io/categories/IT%EC%A0%95%EB%B3%B4/%EB%A7%A4%EC%9D%BC30%EB%B6%84-IT%EB%89%B4%EC%8A%A4/">매일30분 IT뉴스</category>
      
      
      <category domain="https://chlee1001.github.io/tags/IT%EB%89%B4%EC%8A%A4/">IT뉴스</category>
      
      <category domain="https://chlee1001.github.io/tags/IT-Issues/">IT Issues</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%9D%BC%EC%9D%B8/">라인</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8/">블록체인</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%AC%B4%EC%8B%A0%EC%82%AC/">무신사</category>
      
      <category domain="https://chlee1001.github.io/tags/NFT/">NFT</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%81%AC%EB%9F%AC%EC%8A%A4%ED%8A%B8/">크러스트</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9CX/">그라운드X</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%B0%B1%EC%8B%A0%EC%98%88%EC%95%BD/">백신예약</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B0%A4%EB%9F%AD%EC%8B%9CZ%ED%94%8C%EB%A6%BD3/">갤럭시Z플립3</category>
      
      <category domain="https://chlee1001.github.io/tags/NHN/">NHN</category>
      
      
      <comments>https://chlee1001.github.io/2021/08/30/21-08-30-IT_News/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021년 08월 27일 금요일 IT뉴스</title>
      <link>https://chlee1001.github.io/2021/08/27/21-08-27-IT_News/</link>
      <guid>https://chlee1001.github.io/2021/08/27/21-08-27-IT_News/</guid>
      <pubDate>Fri, 27 Aug 2021 09:00:19 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-구글-‘픽셀폰’-국내-출시되나…관련-인력-채용-공고&quot;&gt;&lt;a href=&quot;#1-구글-‘픽셀폰’-국내-출시되나…관련-인력-채용-공고&quot; class=&quot;headerlink&quot; title=&quot;1. 구글 ‘픽셀폰’ 국내 출시되나…관련 인력 채용 공고&quot;&gt;&lt;/a&gt;1. 구글 ‘픽셀폰’ 국내 출시되나…관련 인력 채용 공고&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://news.naver.com/main/read.naver?mode=LSD&amp;mid=shm&amp;sid1=105&amp;oid=421&amp;aid=0005567254&quot;&gt;구글 ‘픽셀폰’ 국내 출시되나…관련 인력 채용 공고&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgnews.pstatic.net/image/421/2021/08/27/0005567254_001_20210827134619952.jpg?type=w647&quot; alt=&quot;구글이 올가을 출시할 예정인 &amp;#39;픽셀6&amp;#39; 모습 (구글 제공) © 뉴스1&quot;&gt;&lt;/p&gt;
&lt;p&gt;최근 구글은 이와 관련된 인력 채용에 나서며, 국내 출시에 대한 기대감을 키우고 있다. 이에 따라 ‘외산폰의 무덤’으로 불리는 국내 시장에서 구글이 LG전자의 빈자리를 채우며 의미 있는 성과를 낼 수 있을지 주목된다.&lt;/p&gt;
&lt;hr&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="1-구글-‘픽셀폰’-국내-출시되나…관련-인력-채용-공고"><a href="#1-구글-‘픽셀폰’-국내-출시되나…관련-인력-채용-공고" class="headerlink" title="1. 구글 ‘픽셀폰’ 국내 출시되나…관련 인력 채용 공고"></a>1. 구글 ‘픽셀폰’ 국내 출시되나…관련 인력 채용 공고</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=421&aid=0005567254">구글 ‘픽셀폰’ 국내 출시되나…관련 인력 채용 공고</a></p><p><img src="https://imgnews.pstatic.net/image/421/2021/08/27/0005567254_001_20210827134619952.jpg?type=w647" alt="구글이 올가을 출시할 예정인 &#39;픽셀6&#39; 모습 (구글 제공) © 뉴스1"></p><p>최근 구글은 이와 관련된 인력 채용에 나서며, 국내 출시에 대한 기대감을 키우고 있다. 이에 따라 ‘외산폰의 무덤’으로 불리는 국내 시장에서 구글이 LG전자의 빈자리를 채우며 의미 있는 성과를 낼 수 있을지 주목된다.</p><hr><h2 id="2-정부-인정-첫-민간인증서는-‘페이코’…네이버·카카오보다-빨랐다"><a href="#2-정부-인정-첫-민간인증서는-‘페이코’…네이버·카카오보다-빨랐다" class="headerlink" title="2. 정부 인정 첫 민간인증서는 ‘페이코’…네이버·카카오보다 빨랐다"></a>2. 정부 인정 첫 민간인증서는 ‘페이코’…네이버·카카오보다 빨랐다</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=015&aid=0004596970">정부 인정 첫 민간인증서는 ‘페이코’…네이버·카카오보다 빨랐다</a></p><p><img src="https://imgnews.pstatic.net/image/015/2021/08/27/0004596970_001_20210827152303948.jpg?type=w647"></p><p>독점적 공인인증서 제도 폐지 이후 정부가 처음 인정한 사설 인증서는 ‘페이코 인증서’가 됐으며 NHN페이코가 네이버·카카오·토스 등 쟁쟁한 경쟁자들에 한 발 앞서 ‘전자서명인증사업자’ 인정을 획득한 것이라 눈길을 끈다.</p><p>회사 측은 이번 정부 인정 획득으로 페이코 인증서의 공신력이 한층 높아져 공공·금융 등 다양한 분야로 사용처를 확대할 발판을 마련했다고 기대했다. 기존에 공인인증서만 허용하던 연말정산 같은 인증 서비스를 간편하게 사용할 수 있는 게 대표적 사례이고, 뿐만 아니라 ‘마이데이터’ 시장 공략에도 앞서나갈 수 있게 됐다. 내년 1월부터 시행되는 마이데이터 서비스의 통합인증 수단에는 전자서명인증사업자 평가·인정을 받은 민간 인증서도 허용된다.</p><hr><h2 id="3-애플-‘인앱결제-강제’-사실상-포기…“외부결제-홍보-가능””"><a href="#3-애플-‘인앱결제-강제’-사실상-포기…“외부결제-홍보-가능””" class="headerlink" title="3. 애플, ‘인앱결제 강제’ 사실상 포기…“외부결제 홍보 가능””"></a>3. 애플, ‘인앱결제 강제’ 사실상 포기…“외부결제 홍보 가능””</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=056&aid=0011109538">애플, ‘인앱결제 강제’ 사실상 포기…“외부결제 홍보 가능”</a></p><p>우리나라에서 세계 최초로 구글과 애플 등 앱장터에서의 인앱결제 강제화를 금지하는 법안이 국회 본회의 통과를 앞둔 가운데 애플이 외부결제를 사실상 허용하도록 정책을 변경했습니다.</p><p>애플은 27일 미국 개발자와의 집단 소송과 관련해 앱 사업자가 자사 결제시스템이 아닌 외부결제 방식을 홍보할 수 있도록 하는 내용 등 7가지 사항에 합의했다고 밝혔습니다.</p><p>합의 사항은 ▲ 연 매출 100만 달러 미만 사업자에 대한 수수료 감면(30%→15%) 최소 3년 유지 ▲ 앱스토어 검색 시스템 3년 유지 ▲ 외부결제 방식에 대한 정보의 이메일 공유 허용 ▲ 개발자 선택 가능한 기준 가격 수의 확장(100개 미만→500개 이상) ▲ 앱 불승인 시 이의 제기 절차 유지 ▲ 연간 투명성 보고서 작성 및 앱 심사 절차에 대한 통계 공유 ▲ 소규모 개발자 지원 기금 설립 등입니다.</p><hr><h2 id="4-“메타버스-성공-위해선-킬러앱-나와야”"><a href="#4-“메타버스-성공-위해선-킬러앱-나와야”" class="headerlink" title="4. “메타버스 성공 위해선 킬러앱 나와야”"></a>4. “메타버스 성공 위해선 킬러앱 나와야”</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=018&aid=0005021800">“메타버스 성공 위해선 킬러앱 나와야”</a></p><p>이병호 서울대 전기정보공학부 교수는 27일 최종현학술원이 ‘메타버스 세계화’를 주제로 개최한 웨비나에서 “현재 메타버스의 콘텐츠는 주로 게임, 단기 이벤트 등에 치중돼 있다”며 “메타버스가 진정으로 사회적 영향력을 발휘하려면 일상적인 사용을 위한 앱이나 대중의 수요를 채워줄 수 있는 킬러 앱이 개발돼야 합니다.”라고 지적했다.</p><p>그는 “메타버스가 대중화를 이루려면 AR·VR 기기의 시각적 피로를 최소화하고, 기기의 크기를 줄이면서 시야각 등을 개선해야 한다”지적했다. 특히 시각적 피로도를 낮추려면 지연성을 줄이는 게 관건이다.</p><hr><h2 id="5-전기차-충전-플랫폼-‘모두의충전’-서울-전역으로-서비스-확대"><a href="#5-전기차-충전-플랫폼-‘모두의충전’-서울-전역으로-서비스-확대" class="headerlink" title="5. 전기차 충전 플랫폼 ‘모두의충전’, 서울 전역으로 서비스 확대"></a>5. 전기차 충전 플랫폼 ‘모두의충전’, 서울 전역으로 서비스 확대</h2><p><a href="https://platum.kr/archives/169891">전기차 충전 플랫폼 ‘모두의충전’, 서울 전역으로 서비스 확대</a></p><p>데이터를 기반으로 운영하는 ‘모두의 충전’은 지난 8개월 동안 강남 3구(송파-강남-서초)에 대리충전 서비스를 제공해왔으며, 최근 전문 탁송 기업과의 신규 계약을 통해 서비스 지역을 서울권 전역으로 확대했다.</p><p>스칼라데이터 윤예찬 대표는 “전기차 최대 등록지인 서울을 시작으로 향후 부산, 대구, 제주 등으로 서비스 지역을 확대할 계획으로  머신러닝 기반 충전 스케줄링 서비스, 충전 통합 결제 시스템, 전기차 베터리 보험 상품 연계 등 전기차와 관련한 다양한 서비스를 제공할 예정”이라며, ”전기차 충전을 생각하면 가장 먼저 떠오르는 스타트업이 되겠다.”라고 밝혔다.</p>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/IT%EC%A0%95%EB%B3%B4/">IT정보</category>
      
      <category domain="https://chlee1001.github.io/categories/IT%EC%A0%95%EB%B3%B4/%EB%A7%A4%EC%9D%BC30%EB%B6%84-IT%EB%89%B4%EC%8A%A4/">매일30분 IT뉴스</category>
      
      
      <category domain="https://chlee1001.github.io/tags/IT%EB%89%B4%EC%8A%A4/">IT뉴스</category>
      
      <category domain="https://chlee1001.github.io/tags/IT-Issues/">IT Issues</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%9D%B8%EC%95%B1%EA%B2%B0%EC%A0%9C/">인앱결제</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B5%AC%EA%B8%80/">구글</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%95%A0%ED%94%8C/">애플</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%A9%94%ED%83%80%EB%B2%84%EC%8A%A4/">메타버스</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%A0%84%EA%B8%B0%EC%B0%A8/">전기차</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%8E%98%EC%9D%B4%EC%BD%94/">페이코</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%94%BD%EC%85%80%ED%8F%B0/">픽셀폰</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%AF%BC%EA%B0%84%EC%9D%B8%EC%A6%9D%EC%84%9C/">민간인증서</category>
      
      <category domain="https://chlee1001.github.io/tags/%EA%B3%B5%EB%8F%99%EC%9D%B8%EC%A6%9D%EC%84%9C/">공동인증서</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%B6%A9%EC%A0%84/">충전</category>
      
      
      <comments>https://chlee1001.github.io/2021/08/27/21-08-27-IT_News/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021년 08월 25일 수요일 IT뉴스</title>
      <link>https://chlee1001.github.io/2021/08/25/21-08-25-IT_News/</link>
      <guid>https://chlee1001.github.io/2021/08/25/21-08-25-IT_News/</guid>
      <pubDate>Wed, 25 Aug 2021 09:00:19 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-10년간-고집한-‘게임셧다운제’…여가부-돌연-“폐지”&quot;&gt;&lt;a href=&quot;#1-10년간-고집한-‘게임셧다운제’…여가부-돌연-“폐지”&quot; class=&quot;headerlink&quot; title=&quot;1. 10년간 고집한 ‘게임셧다운제’…여가부 돌연 “폐지”&quot;&gt;&lt;/a&gt;1. 10년간 고집한 ‘게임셧다운제’…여가부 돌연 “폐지”&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://news.naver.com/main/read.naver?mode=LSD&amp;mid=shm&amp;sid1=105&amp;oid=009&amp;aid=0004843219&quot;&gt;10년간 고집한 ‘게임셧다운제’…여가부 돌연 “폐지”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgnews.pstatic.net/image/009/2021/08/25/0004843219_001_20210825174202918.jpg?type=w647&quot;&gt;&lt;/p&gt;
&lt;p&gt;밤 12시부터 오전 6시까지 심야 시간에 청소년의 게임 이용을 차단하는 규제인 ‘강제적 셧다운제’가 10년 만에 폐지 수순을 밟으며, 게임 이용 시간을 직접 설정할 수 있는 ‘게임시간선택제’가 그 자리를 대신한다.&lt;/p&gt;
&lt;p&gt;이번 변화를 두고 직접적 당사자인 게임 업계에서는 일단 폐지를 반기면서도 다양한 의견이 나오고 있고, 72개 게임사를 회원으로 둔 한국게임산업협회는 “갈라파고스 규제인 강제적 셧다운제의 폐지 결정을 적극 지지하고 환영하며 관련 법안 개정이 신속하게 이뤄지기를 기대한다”는 입장을 냈다. 한국게임학회장을 맡은 위정현 교수는 “실효성이 없는 법적 규제 자체를 아예 없애고 부모와 학생, 각 가정이 국가에 위임한 스스로의 권한을 찾아와야 한다”고 했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="1-10년간-고집한-‘게임셧다운제’…여가부-돌연-“폐지”"><a href="#1-10년간-고집한-‘게임셧다운제’…여가부-돌연-“폐지”" class="headerlink" title="1. 10년간 고집한 ‘게임셧다운제’…여가부 돌연 “폐지”"></a>1. 10년간 고집한 ‘게임셧다운제’…여가부 돌연 “폐지”</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=009&aid=0004843219">10년간 고집한 ‘게임셧다운제’…여가부 돌연 “폐지”</a></p><p><img src="https://imgnews.pstatic.net/image/009/2021/08/25/0004843219_001_20210825174202918.jpg?type=w647"></p><p>밤 12시부터 오전 6시까지 심야 시간에 청소년의 게임 이용을 차단하는 규제인 ‘강제적 셧다운제’가 10년 만에 폐지 수순을 밟으며, 게임 이용 시간을 직접 설정할 수 있는 ‘게임시간선택제’가 그 자리를 대신한다.</p><p>이번 변화를 두고 직접적 당사자인 게임 업계에서는 일단 폐지를 반기면서도 다양한 의견이 나오고 있고, 72개 게임사를 회원으로 둔 한국게임산업협회는 “갈라파고스 규제인 강제적 셧다운제의 폐지 결정을 적극 지지하고 환영하며 관련 법안 개정이 신속하게 이뤄지기를 기대한다”는 입장을 냈다. 한국게임학회장을 맡은 위정현 교수는 “실효성이 없는 법적 규제 자체를 아예 없애고 부모와 학생, 각 가정이 국가에 위임한 스스로의 권한을 찾아와야 한다”고 했다.</p><hr><h2 id="2-토스도-‘본인확인’서비스…이통사-독무대-깬다"><a href="#2-토스도-‘본인확인’서비스…이통사-독무대-깬다" class="headerlink" title="2. 토스도 ‘본인확인’서비스…이통사 독무대 깬다"></a>2. 토스도 ‘본인확인’서비스…이통사 독무대 깬다</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=009&aid=0004843235">토스도 ‘본인확인’서비스…이통사 독무대 깬다</a></p><p><img src="https://imgnews.pstatic.net/image/009/2021/08/25/0004843235_001_20210825174702961.jpg?type=w647"></p><p>모바일 금융 플랫폼 토스를 운영하는 비바리퍼블리카가 본인확인기관으로 지정됨에 따라 이동통신 3사가 독점하던 본인 확인 시장에 핀테크 기업이 발을 들인 것이며, 토스와 함께 도전장을 내민 KB국민은행은 이번에 탈락했다. </p><p>핀테크와 금융사가 인증 시장에 도전장을 내미는 이유는 인증이 금융 서비스를 완결하는 핵심이기 때문으로 돈이 오가는 금융 거래와 온라인 상거래를 이용할 때는 회원 가입과 비밀번호 변경 등 모든 절차에 본인 확인과 인증 절차가 필수적인데 토스가 본인확인기관으로 지정되면서 본인 확인부터 인증에 이르는 모든 절차를 직접 관리하게 된다.</p><hr><h2 id="3-컴투스-메타버스사-‘위지윅’-최대주주로…”글로벌-콘텐츠사로-가속화”"><a href="#3-컴투스-메타버스사-‘위지윅’-최대주주로…”글로벌-콘텐츠사로-가속화”" class="headerlink" title="3. 컴투스, 메타버스사 ‘위지윅’ 최대주주로…”글로벌 콘텐츠사로 가속화”"></a>3. 컴투스, 메타버스사 ‘위지윅’ 최대주주로…”글로벌 콘텐츠사로 가속화”</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=003&aid=0010683425">컴투스, 메타버스사 ‘위지윅’ 최대주주로…”글로벌 콘텐츠사로 가속화”</a></p><p><img src="https://imgnews.pstatic.net/image/003/2021/08/25/NISI20210825_0000815289_web_20210825164723_20210825171710880.jpg?type=w647"></p><p>위지윅은 증강현실(AR)·가상현실(VR)·가상융합현실(XR) 등의 기술을 결합해 미래 산업으로 부상하는 메타버스 프로젝트를 적극 추진하고, 지식재산(IP) 생산부터 2차 제작까지 전 과정을 하나의 스튜디오에서 통합 진행하는 위지윅만의 종합 제작 시스템도 구축하고 있으며,  이번 인수로 컴투스는 차세대 미디어 콘텐츠 산업에서 독보적 위치에 올라선 위지윅의 IP와 제작 역량을 확보해 글로벌 종합 콘텐츠 기업으로의 성장을 가속화할 수 있게 됐다.</p><p>영화, 드라마, 웹소설 등 위지윅의 여러 작품을 글로벌 게임으로 제작하고, 컴투스의 인기 게임들을 다양한 콘텐츠로 확장하는 등 트랜스 미디어 전략으로 탄탄한 IP 밸류체인을 만들어갈 계획이다.</p><ul><li>위지윅은 세계 최고 수준의 컴퓨터그래픽(CG)·시각특수효과(VFX) 기술로 넷플릭스 ‘승리호’를 비롯해 국내외 다양한 영화, 드라마 등을 만들어온 콘텐츠 제작사다.</li></ul><hr><h2 id="4-페북-‘얼굴정보’-수집이-꼼수로-적발된-이유"><a href="#4-페북-‘얼굴정보’-수집이-꼼수로-적발된-이유" class="headerlink" title="4. 페북 ‘얼굴정보’ 수집이 꼼수로 적발된 이유"></a>4. 페북 ‘얼굴정보’ 수집이 꼼수로 적발된 이유</h2><p><a href="https://news.naver.com/main/read.naver?mode=LSD&mid=shm&sid1=105&oid=092&aid=0002231684">페북 ‘얼굴정보’ 수집이 꼼수로 적발된 이유</a></p><p>25일 개인정보보호위원회는 페이스북을 비롯한 넷플릭스, 구글 등 해외 플랫폼 사업자들을 대상으로 개인정보보호법 위반 행위를 적발, 과징금 총 66억6천만원과 과태료 2천900만원을 부과하는 등 시정명령을 내렸고, 과징금의 대부분이 페이스북의 불법 얼굴인식 정보 생성 및 수집에 따른 것이다. </p><p>페이스북은 이용자 정보를 수집 및 활용, 관리하는 방식을 안내하는 ‘데이터 정책’을 2018년 4월 수정, 얼굴인식 기능이 활성화될 수 있다는 내용을 명시했고, 이 기능이 활성화돼 있으면 이용자가 프로필에 등록한 사진, 영상 등을 토대로 얼굴에 대한 수치화된 정보(템플릿)를 생성, 수집하게 된다. 하지만 문제는 이용자가 가입 전 얼굴인식 기능을 비활성화할 수 없었다는 점이다.</p><p>이용자가 가입하자마자 이런 설정을 수정하지 않고 무심코 프로필에 얼굴 이미지를 등록하게 되면, 추가적인 동의 절차 없이 얼굴 정보가 수집된 것이다.</p><hr>]]></content:encoded>
      
      
      <category domain="https://chlee1001.github.io/categories/IT%EC%A0%95%EB%B3%B4/">IT정보</category>
      
      <category domain="https://chlee1001.github.io/categories/IT%EC%A0%95%EB%B3%B4/%EB%A7%A4%EC%9D%BC30%EB%B6%84-IT%EB%89%B4%EC%8A%A4/">매일30분 IT뉴스</category>
      
      
      <category domain="https://chlee1001.github.io/tags/IT%EB%89%B4%EC%8A%A4/">IT뉴스</category>
      
      <category domain="https://chlee1001.github.io/tags/IT-Issues/">IT Issues</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%A9%94%ED%83%80%EB%B2%84%EC%8A%A4/">메타버스</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B6%81/">페이스북</category>
      
      <category domain="https://chlee1001.github.io/tags/%ED%86%A0%EC%8A%A4/">토스</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%85%A7%EB%8B%A4%EC%9A%B4%EC%A0%9C/">셧다운제</category>
      
      <category domain="https://chlee1001.github.io/tags/%EB%B3%B8%EC%9D%B8%ED%99%95%EC%9D%B8/">본인확인</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%BB%B4%ED%88%AC%EC%8A%A4/">컴투스</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%96%BC%EA%B5%B4%EC%88%98%EC%A7%91/">얼굴수집</category>
      
      <category domain="https://chlee1001.github.io/tags/%EC%96%BC%EA%B5%B4%EC%9D%B8%EC%8B%9D/">얼굴인식</category>
      
      
      <comments>https://chlee1001.github.io/2021/08/25/21-08-25-IT_News/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
