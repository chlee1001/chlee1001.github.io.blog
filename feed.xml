<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CH Blog | 기술 블로그</title>
    <link>https://devch.co.kr/</link>
    
    <atom:link href="https://devch.co.kr/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Chaehyeon&#39;s Dev Blog</description>
    <pubDate>Thu, 01 Sep 2022 07:44:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[JS] ES2022 신기능 중 4가지 </title>
      <link>https://devch.co.kr/2022/07/11/JS-ES2022-1-22-07-11%20/</link>
      <guid>https://devch.co.kr/2022/07/11/JS-ES2022-1-22-07-11%20/</guid>
      <pubDate>Mon, 11 Jul 2022 02:03:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES2022 신기능 4가지
&lt;/aside&gt;



&lt;p&gt;&lt;a href=&quot;https://chae-hyeon.notion.site/JS-ES2022-4-2c0bc708c36e44fda2ea86f241c749ee&quot;&gt;노션에서 보기&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Top-level-await&quot;&gt;&lt;a href=&quot;#Top-level-await&quot; class=&quot;headerlink&quot; title=&quot;Top level await&quot;&gt;&lt;/a&gt;Top level await&lt;/h1&gt;&lt;p&gt;기존 &lt;code&gt;await&lt;/code&gt;를 사용하려면 &lt;code&gt;async&lt;/code&gt; 함수 내에서만 가능했다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES2022 신기능 4가지</aside><p><a href="https://chae-hyeon.notion.site/JS-ES2022-4-2c0bc708c36e44fda2ea86f241c749ee">노션에서 보기</a></p><h1 id="Top-level-await"><a href="#Top-level-await" class="headerlink" title="Top level await"></a>Top level await</h1><p>기존 <code>await</code>를 사용하려면 <code>async</code> 함수 내에서만 가능했다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">await</span> foo();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>하지만, ES2022부터 이러한 규칙이 사라지고, <code>await</code>를 <code>async</code>함수없이 모듈에서 아래와 같이 작성가능해졌다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> foo();</span><br></pre></td></tr></table></figure><h1 id="Error-Cause"><a href="#Error-Cause" class="headerlink" title="Error Cause"></a>Error Cause</h1><p>이 기능을 통해 오류의 원인을 설명하여, 더 나은 오류 메시지를 만들 수 있다.</p><p>기존 오류를 만들 때는 오류 메시지를 작성하는 것 밖에 할 수 없었다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;This is the Error Message!&quot;</span>);</span><br></pre></td></tr></table></figure><p>하지만 ES2022부터 무엇이 오류를 발생시켰는지에 대해 설명할 수 있다. 그래서 정확히 무엇이 잘못되었는지 구체적으로 알 수 있으며, 동일한 오류메시지를 사용하지만 다른 원인을 작성할 수 있다.</p><p>또한, <code>.cause</code>를 액세스할 수 있다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;This is the Error Message!&quot;</span>, &#123; <span class="attr">cause</span>: <span class="string">&quot;Test Message&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">err.message; <span class="comment">// This is the Error Message!</span></span><br><span class="line">err.cause; <span class="comment">// Test Message</span></span><br></pre></td></tr></table></figure><h1 id="at"><a href="#at" class="headerlink" title=".at()"></a>.at()</h1><p><code>.at</code>을 활용하면, 배열의 모든 인덱스에 액세스할 수 있다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> number = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>];</span><br><span class="line"></span><br><span class="line">number.at(<span class="number">2</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>이전에도 대괄호를 사용하여 액세스할 수 있었지만, 대괄호와의 차이점은 뒤로 검색가능하다는 점이다. 대괄호는 <strong>-1</strong> 로 검색할 수 없었지만, .at을 통하면 가능하다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> number = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>];</span><br><span class="line"></span><br><span class="line">number.at(<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">nubmer.at(-<span class="number">1</span>); <span class="comment">// 5</span></span><br><span class="line">~~number[-<span class="number">1</span>]; <span class="comment">//  불가능~~</span></span><br></pre></td></tr></table></figure><h1 id="Class-Fields"><a href="#Class-Fields" class="headerlink" title="Class Fields"></a>Class Fields</h1><p>이것을 통해, 자바스크립트가 조금 더 <code>OOP</code>스럽게 느껴지게 한다. 이전에는 불가능했던 <code>Private</code> 메서드 및 속성을 가질 수 있으며, <code>static</code> 메서드를 사용할 수 있다.</p><p>그리고 속성을 초기화하기 위해 <code>constructor</code>를 사용할 필요도 없어진다.</p><h2 id="Private-메서드-및-속성"><a href="#Private-메서드-및-속성" class="headerlink" title="Private 메서드 및 속성"></a>Private 메서드 및 속성</h2><p>private 메서드나 속성을 만들려면 <strong>이름 앞에 # 기호를 사용</strong>하면 된다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">#<span class="function"><span class="title">destruct</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;booom!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> but = <span class="keyword">new</span> Message();</span><br><span class="line">~~btn.#destruct(); <span class="comment">// 작동하지 않는다~~</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">#text = <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>위 코드처럼 private한 메서드 및 텍스트를 만들 수 있으며, constructor를 사용하지 않는다.</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.text = <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Static-메서드"><a href="#Static-메서드" class="headerlink" title="Static 메서드"></a>Static 메서드</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"><span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Message.build()&#123;</span><br><span class="line"><span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">build</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>출처</p><p><a href="https://www.youtube.com/watch?v=m-R7s7fnwvU">방금 출시된 ⚡️자바스크립트 미친 신기능 4개!</a></p>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/ES2022/">ES2022</category>
      
      <category domain="https://devch.co.kr/tags/OOP/">OOP</category>
      
      <category domain="https://devch.co.kr/tags/Private/">Private</category>
      
      <category domain="https://devch.co.kr/tags/Static/">Static</category>
      
      <category domain="https://devch.co.kr/tags/at/">at</category>
      
      <category domain="https://devch.co.kr/tags/async/">async</category>
      
      <category domain="https://devch.co.kr/tags/await/">await</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/">비동기</category>
      
      <category domain="https://devch.co.kr/tags/ECMA/">ECMA</category>
      
      <category domain="https://devch.co.kr/tags/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/">프론트엔드</category>
      
      <category domain="https://devch.co.kr/tags/FE/">FE</category>
      
      
      <comments>https://devch.co.kr/2022/07/11/JS-ES2022-1-22-07-11%20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ESLint 알고쓰기 : 설정 설명</title>
      <link>https://devch.co.kr/2022/07/07/JS-ESLint-1-22-07-07/</link>
      <guid>https://devch.co.kr/2022/07/07/JS-ESLint-1-22-07-07/</guid>
      <pubDate>Thu, 07 Jul 2022 06:35:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 ESLint 설정하기
&lt;/aside&gt;



&lt;p&gt;&lt;a href=&quot;https://chae-hyeon.notion.site/JS-ESLint-4c7f73b6bbb2443fa0b942b14a229d4c&quot;&gt;노션 링크&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 문서는 &lt;a href=&quot;https://eslint.org/&quot;&gt;eslint.org&lt;/a&gt;를 참고하여 &lt;strong&gt;eslint&lt;/strong&gt; &lt;code&gt;7.32.0&lt;/code&gt; &lt;strong&gt;버전&lt;/strong&gt;에서 작성되었으며, 아래 프로젝트를 기반으로 작성했습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chlee1001/react-typescript-simple-boilerplate&quot;&gt;https://github.com/chlee1001/react-typescript-simple-boilerplate&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 ESLint 설정하기</aside><p><a href="https://chae-hyeon.notion.site/JS-ESLint-4c7f73b6bbb2443fa0b942b14a229d4c">노션 링크</a></p><p>이 문서는 <a href="https://eslint.org/">eslint.org</a>를 참고하여 <strong>eslint</strong> <code>7.32.0</code> <strong>버전</strong>에서 작성되었으며, 아래 프로젝트를 기반으로 작성했습니다.</p><p><a href="https://github.com/chlee1001/react-typescript-simple-boilerplate">https://github.com/chlee1001/react-typescript-simple-boilerplate</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;es2021&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;airbnb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;airbnb-typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;airbnb/hooks&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended-requiring-type-checking&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:import/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:import/typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:jsx-a11y/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:react/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:react-hooks/recommended&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;project&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;./tsconfig.json&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;jsx&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;ecmaVersion&quot;</span>: <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@typescript-eslint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;import&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;import/prefer-default-export&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;import/no-unresolved&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;import/extensions&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;off&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;react/function-component-definition&quot;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;namedComponents&quot;</span>: <span class="string">&quot;arrow-function&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unnamedComponents&quot;</span>: <span class="string">&quot;arrow-function&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;ignorePatterns&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;paths.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack.*.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dist/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_modules/*&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;detect&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h1><ul><li><code>browser</code> - browser global variables <code>: true</code>를 하게되면 **console.log()**를 에러없이 사용할 수 있다.</li><li><code>node</code> - Node.js global variables and Node.js scoping : <code>true</code>를 하게되면 전역에서 <strong>require</strong>를 에러없이 사용할 수 있게된다.</li><li><code>es2021</code> - adds all ECMAScript 2021 globals and automatically sets the <code>ecmaVersion</code> parser option to 12.</li></ul><h1 id="EXTENDS"><a href="#EXTENDS" class="headerlink" title="EXTENDS"></a>EXTENDS</h1><p><code>extends</code>는 추가한 플러그인에서 사용할 규칙을 설정한다. 플러그인을 설치하여도, 플러그인은 일련의 규칙집합이며 플러그인을 추가하여도 <strong>규칙은 적용되지 않는다.</strong> 규칙을 적용하기 위해서는 추가한 플러그인 중, <strong>사용할 규칙을 extends 내에 추가해야한다.</strong> 보통 대부분의 플러그인은 <code>recommended</code>나 <code>strict</code>, <code>all</code> 등의 자체 설정을 제공한다.</p><ul><li><code>recommended</code>: <strong>프로젝트에 권장하는 규칙 집합</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;airbnb&quot;, // airbnb의 규칙 사용</span><br><span class="line">    &quot;airbnb-typescript&quot;, // TS를 지원하는 airbnb 규칙 구성 향상</span><br><span class="line">    &quot;airbnb/hooks&quot;, // React hooks를 위한 airbnb 규칙사용</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;, // ESLint가 TypeScript를 지원할 수 있도록 하는 모든 도구를 위한 Monorepo</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended-requiring-type-checking&quot;, // 일부 highly valuable rules를 올바르게 구현하기 위해 유형 검사를 위한 추천 요구 유형 검사</span><br><span class="line">    &quot;plugin:import/recommended&quot;, // import명이나 잘못 작성한 파일 경로에 대한 이슈를 방지해주는 플러그인 (아래 errors와 warnings의 집합)</span><br><span class="line">    <span class="comment">// &quot;plugin:import/errors&quot;, </span></span><br><span class="line">    <span class="comment">// &quot;plugin:import/warnings&quot;,</span></span><br><span class="line">    &quot;plugin:import/typescript&quot;, // TS에서 `eslint-plugin-import`를 사용하기 위해 추가</span><br><span class="line">    &quot;plugin:jsx-a11y/recommended&quot;, // JSX 요소에 대한 접근성 규칙</span><br><span class="line">    &quot;plugin:prettier/recommended&quot;, // prettier 규칙을 적용하여 틀릴 경우 eslint 문제로 처리</span><br><span class="line">    &quot;plugin:react/recommended&quot;, // eslint-plugin-react의 추천 규칙 사용</span><br><span class="line">    <span class="string">&quot;plugin:react-hooks/recommended&quot;</span></span><br><span class="line">  ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="PARSER"><a href="#PARSER" class="headerlink" title="PARSER"></a>PARSER</h1><p>코드를 분석하기 위한 파싱툴이다. 기본값은 espress이고, 보통 js 워크스페이스에서는 <code>@babel/eslint-parser</code>를 사용하고 ts 워크스페이스인 경우 <code>@typescript-eslint/parser</code>를 사용한다. 사실 <code>plugin:@typescript-eslint/recommended</code>를 포함시키면 <code>@typescript-eslint/parser</code>가 자동으로 포함되기도 한다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;parser&quot;: &quot;@typescript-eslint/parser&quot; </span><br></pre></td></tr></table></figure><h1 id="PARSER-OPTIONS"><a href="#PARSER-OPTIONS" class="headerlink" title="PARSER OPTIONS"></a>PARSER OPTIONS</h1><p><code>parserOptions</code>은 ESLint 사용을 위해 지원하려는 Javascript 언어 옵션을 지정할 수 있습니다.</p><ul><li>project: 이 옵션을 사용하면 제공된 tsconfig에서 정의한 프로젝트에 포함되지 않은 파일이 허용되도록 요청할 수 있다.</li><li>ecmaVersion: 사용할 ECMAScript 버전을 설정</li><li>sourceType: parser의 export 형태를 설정</li><li>ecmaFeatures: ECMAScript의 언어 확장 기능을 설정<ul><li>globalReturn: 전역 스코프의 사용 여부 (node, commonjs 환경에서 최상위 스코프는 module)</li><li>impliedStric: strict mode 사용 여부</li><li>jsx: ECMScript 규격의 <a href="https://facebook.github.io/jsx/">JSX</a> 사용 여부</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;parserOptions&quot;: &#123;</span><br><span class="line">  &quot;project&quot;: [</span><br><span class="line">    <span class="string">&quot;./tsconfig.json&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">    &quot;jsx&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;ecmaVersion&quot;: &quot;latest&quot;,</span><br><span class="line">  &quot;sourceType&quot;: &quot;module&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="PLUGIN"><a href="#PLUGIN" class="headerlink" title="PLUGIN"></a>PLUGIN</h1><p>플러그인 패키지를 설치하고, 해당 플러그인을 <code>plugins</code>에 추가하여 사용할 수 있다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">  &quot;react&quot;,</span><br><span class="line">  &quot;@typescript-eslint&quot;,</span><br><span class="line">  <span class="string">&quot;import&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h1 id="RULES"><a href="#RULES" class="headerlink" title="RULES"></a>RULES</h1><p>ESLint에는 프로젝트에서 사용하는 규칙을 수정할 수 있다. 규칙을 변경하는 경우, 다음과 같은 방법으로 설정해야한다.</p><ul><li><code>&quot;off&quot;</code> 또는 <code>0</code>: 규칙을 사용하지 않음</li><li><code>&quot;warn&quot;</code> 또는 <code>1</code>: 규칙을 경고로 사용</li><li><code>&quot;error”</code> 또는 <code>2</code>: 규칙을 오류로 사용</li></ul><p><strong>규칙에 추가 옵션이 있는 경우</strong>에는 배열 리터럴 구문을 사용하여 지정할 수 있다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">    &quot;import/prefer-default-export&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;import/no-unresolved&quot;: 0,</span><br><span class="line">    &quot;import/extensions&quot;: [</span><br><span class="line">      <span class="string">&quot;off&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    &quot;react/function-component-definition&quot;: [</span><br><span class="line">      2,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;namedComponents&quot;</span>: <span class="string">&quot;arrow-function&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;unnamedComponents&quot;</span>: <span class="string">&quot;arrow-function&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="규칙-무시하기"><a href="#규칙-무시하기" class="headerlink" title="규칙 무시하기"></a>규칙 무시하기</h1><h2 id="파일-디렉토리-제외"><a href="#파일-디렉토리-제외" class="headerlink" title="파일 디렉토리 제외"></a><strong>파일 디렉토리 제외</strong></h2><p><code>ignorePatterns</code> 필드 또는 <code>.eslintignore</code> 파일을 작성하여 파일 및 디렉토리를 제외하도록 지정할 수 있습니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc 파일 ignorePatterns 설정</span></span><br><span class="line"></span><br><span class="line">&quot;ignorePatterns&quot;: [</span><br><span class="line">  &quot;paths.js&quot;,</span><br><span class="line">  &quot;webpack.*.js&quot;,</span><br><span class="line">  &quot;dist/*&quot;,</span><br><span class="line">  <span class="string">&quot;node_modules/*&quot;</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">//.eslintignore 파일 생성</span></span><br><span class="line">config/</span><br><span class="line">dist/</span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure><h2 id="대체파일-사용"><a href="#대체파일-사용" class="headerlink" title="대체파일 사용"></a>대체파일 사용</h2><p><code>.eslintignore</code>를 현재 작업 디렉토리가 아닌 다른 파일을 사용하려면 <code>--ignore-path</code> 옵션을 사용하여 명령행에 파일을 지정할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eslint --ignore-path .gitignore file.js</span><br></pre></td></tr></table></figure><h2 id="인라인으로-규칙-비활성화"><a href="#인라인으로-규칙-비활성화" class="headerlink" title="인라인으로 규칙 비활성화"></a><strong>인라인으로 규칙 비활성화</strong></h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">**<span class="comment">// 전체 파일 규칙 경고 비활성화, 파일 맨위에 아래 블록 주석 추가**</span></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* eslint-enable no-alert, no-console */</span></span><br><span class="line"></span><br><span class="line">**<span class="comment">// 경고 비활성화 블록 주석**</span></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br><span class="line"></span><br><span class="line">**<span class="comment">// 특정 규칙 경고 비활성화**</span></span><br><span class="line"><span class="comment">/* eslint-disable no-alert, no-console */</span></span><br><span class="line">alert(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">**<span class="comment">// 다음 한줄 경고 비활성화**</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="https://eslint.org/docs/latest/user-guide/configuring/">Configuring ESLint - ESLint - Pluggable JavaScript Linter</a></p><p><a href="https://velog.io/@kyusung/eslint-config-2">https://velog.io/@kyusung/eslint-config-2</a></p><p><a href="https://velog.io/@yrnana/ESLint-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90">ESLint 알고 쓰기</a></p>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/React/">React</category>
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/ESLint/">ESLint</category>
      
      <category domain="https://devch.co.kr/tags/lint/">lint</category>
      
      <category domain="https://devch.co.kr/tags/ecma/">ecma</category>
      
      <category domain="https://devch.co.kr/tags/es6/">es6</category>
      
      <category domain="https://devch.co.kr/tags/es2022/">es2022</category>
      
      <category domain="https://devch.co.kr/tags/es2021/">es2021</category>
      
      <category domain="https://devch.co.kr/tags/react/">react</category>
      
      <category domain="https://devch.co.kr/tags/node/">node</category>
      
      
      <comments>https://devch.co.kr/2022/07/07/JS-ESLint-1-22-07-07/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 선언한 모듈로 이동하기 (alias) - Go to declaration</title>
      <link>https://devch.co.kr/2022/07/06/JS-Babel-3-22-07-06/</link>
      <guid>https://devch.co.kr/2022/07/06/JS-Babel-3-22-07-06/</guid>
      <pubDate>Wed, 06 Jul 2022 06:28:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Babel &amp; IDE `Go to declaration`
&lt;/aside&gt;



&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; title=&quot;문제&quot;&gt;&lt;/a&gt;문제&lt;/h1&gt;&lt;p&gt;많은 사람들은 선언한 모듈들을 &lt;strong&gt;command/ctrl + click&lt;/strong&gt;으로 해당 파일로 바로 이동하거나 자동완성이 되게하는 IDE나 Editor의 기능을 사용할 것이다. 그리고 &lt;code&gt;babel-plugin-module-resolver&lt;/code&gt;을 통해 모듈의 경로를 별칭으로 바꿔서 사용할 것이다. 하지만 별칭으로 바꾸면서 위 기능이 깨지는 문제가 종종 있다. 그리고 이 문제는 플러그인쪽에서는 해결되지 않고 있다. npm에 올라온 최신버전은 이미 2년이 지났다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-module-resolver&quot;&gt;babel-plugin-module-resolver&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Babel & IDE `Go to declaration`</aside><h1 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h1><p>많은 사람들은 선언한 모듈들을 <strong>command/ctrl + click</strong>으로 해당 파일로 바로 이동하거나 자동완성이 되게하는 IDE나 Editor의 기능을 사용할 것이다. 그리고 <code>babel-plugin-module-resolver</code>을 통해 모듈의 경로를 별칭으로 바꿔서 사용할 것이다. 하지만 별칭으로 바꾸면서 위 기능이 깨지는 문제가 종종 있다. 그리고 이 문제는 플러그인쪽에서는 해결되지 않고 있다. npm에 올라온 최신버전은 이미 2년이 지났다.</p><p><a href="https://www.npmjs.com/package/babel-plugin-module-resolver">babel-plugin-module-resolver</a></p><h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>우리는 <code>jsconfig.json</code>을 사용하여 IDE가 사용자 지정 resolve규칙을 따르도록 하는 것이 좋다. 이 접근 방식은 <strong>Webstorm</strong>과 <strong>VS Code</strong> 모두 작동한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;#api/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/api/*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;#assets/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/assets/*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;#common/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/common/*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;#component/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/component/*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;#constant/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/constant/*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;#container/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;./src/container/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Babel/">Babel</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B0%94%EB%B2%A8/">바벨</category>
      
      <category domain="https://devch.co.kr/tags/Webpack/">Webpack</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9B%B9%ED%8C%A9/">웹팩</category>
      
      <category domain="https://devch.co.kr/tags/IDE/">IDE</category>
      
      <category domain="https://devch.co.kr/tags/Webstorm/">Webstorm</category>
      
      <category domain="https://devch.co.kr/tags/VSCode/">VSCode</category>
      
      
      <comments>https://devch.co.kr/2022/07/06/JS-Babel-3-22-07-06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] babelrc와 webpack.config</title>
      <link>https://devch.co.kr/2022/07/06/JS-Babel-2-22-07-06/</link>
      <guid>https://devch.co.kr/2022/07/06/JS-Babel-2-22-07-06/</guid>
      <pubDate>Wed, 06 Jul 2022 03:28:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Babel &amp; Webpack
&lt;/aside&gt;



&lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt;으로 &lt;code&gt;React&lt;/code&gt; 프로젝트를 초기 설정하다가 ,&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;presets: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;@babel/preset-env&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      targets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        browsers: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;gt; 5% in KR&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;last 2 chrome versions&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      debug: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;@babel/preset-react&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;위 코드의 &lt;strong&gt;presets&lt;/strong&gt;가 과연 &lt;code&gt;.babelrc&lt;/code&gt;에 있어야 하는지, &lt;code&gt;webpack.config.js&lt;/code&gt;에 있어야하는지 잘 모르겠어서 각 파일의 목적을 정리해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Babel & Webpack</aside><p><code>Webpack</code>으로 <code>React</code> 프로젝트를 초기 설정하다가 ,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">presets: [</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      targets: &#123;</span><br><span class="line">        browsers: [<span class="string">&#x27;&gt; 5% in KR&#x27;</span>, <span class="string">&#x27;last 2 chrome versions&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      debug: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>위 코드의 <strong>presets</strong>가 과연 <code>.babelrc</code>에 있어야 하는지, <code>webpack.config.js</code>에 있어야하는지 잘 모르겠어서 각 파일의 목적을 정리해보았다.</p><h2 id="babelrc"><a href="#babelrc" class="headerlink" title="babelrc"></a>babelrc</h2><p><strong>.babelrc</strong>는 <code>babel</code>의 설정을 위해 사용한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [...],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-config"><a href="#webpack-config" class="headerlink" title="webpack.config"></a>webpack.config</h2><p>물론 <strong>webpack.config.js</strong>는 <code>webpack</code>의 설정을 위해 사용한다. 프로젝트 파일의 번들링과 관련된 설정들을 작성해준다. 그리고 <code>babel</code>과 관련된 설정들을 <strong>.babelrc</strong>가 아닌 <strong>webpack.config.js</strong>에서 <code>babel-loader</code>를 설정한 부분에 작성해줄 수도 있다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\\.js?/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  browsers: [<span class="string">&#x27;&gt; 5% in KR&#x27;</span>, <span class="string">&#x27;last 2 chrome versions&#x27;</span>],</span><br><span class="line">                &#125;,</span><br><span class="line">                debug:<span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">          ],</span><br><span class="line">          plugins: [</span><br><span class="line">            <span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;react-refresh/babel&#x27;</span>,</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;module-resolver&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                root: [<span class="string">&#x27;./src&#x27;</span>],</span><br><span class="line">                alias: &#123;</span><br><span class="line">                  <span class="string">&#x27;#api&#x27;</span>: <span class="string">&#x27;./src/api/&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;#assets&#x27;</span>: <span class="string">&#x27;./src/asset/&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;#common&#x27;</span>: <span class="string">&#x27;./src/common/&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;#component&#x27;</span>: <span class="string">&#x27;./src/component/&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;#constant&#x27;</span>: <span class="string">&#x27;./src/constant/&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;#container&#x27;</span>: <span class="string">&#x27;./src/container/&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>결론은, <code>babel</code>의 <code>presets</code>는 <strong>webpack.config.js</strong>와 <strong>.babelrc</strong> 파일 둘 중 한 곳에만 있으면 된다! 그러나 babel cli를 이용하여 직접 코드 변환을 수행하거나 babel test 등을 돌릴 때에는 <code>webpack</code>을 거치지 않기 때문에 <strong>.babelrc</strong>에 작성하는 방식이 권장된다.</p><p>나는 webpack.config.js 내에 적어서 사용한다.</p>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Babel/">Babel</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B0%94%EB%B2%A8/">바벨</category>
      
      <category domain="https://devch.co.kr/tags/Webpack/">Webpack</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9B%B9%ED%8C%A9/">웹팩</category>
      
      
      <comments>https://devch.co.kr/2022/07/06/JS-Babel-2-22-07-06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] Babel로 별칭 경로 설정하기</title>
      <link>https://devch.co.kr/2022/07/05/JS-Babel-1-22-07-05/</link>
      <guid>https://devch.co.kr/2022/07/05/JS-Babel-1-22-07-05/</guid>
      <pubDate>Tue, 05 Jul 2022 13:12:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Babel Alias
&lt;/aside&gt;



&lt;p&gt;프로젝트의 규모가 커지면 디렉토리 구조도 복잡해진다. 그 때문에 아래와 같이 컴포넌트의 위치를 찾기 어려워진다.&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; whereIsThis &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;../../../../../aaa/bbb/ccc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;위와 같이 작성한 것을  &lt;code&gt;상대경로&lt;/code&gt;라고 한다. 상대 경로를 사용해서 모듈을 불러오면 모듈이 어느 경로에 위치하는지 파악하기가 난해해지는 경우가 생긴다. 뿐만 아니라, 이 자바스크립트 파일을 다른 디렉토리로 옮기려면 상대 경로를 그에 따라 모두 수정해줘야 해서 코드 리펙토링(refactoring)이 상당히 불편하다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Babel Alias</aside><p>프로젝트의 규모가 커지면 디렉토리 구조도 복잡해진다. 그 때문에 아래와 같이 컴포넌트의 위치를 찾기 어려워진다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; whereIsThis &#125; <span class="keyword">from</span> <span class="string">&quot;../../../../../aaa/bbb/ccc&quot;</span>;</span><br></pre></td></tr></table></figure><p>위와 같이 작성한 것을  <code>상대경로</code>라고 한다. 상대 경로를 사용해서 모듈을 불러오면 모듈이 어느 경로에 위치하는지 파악하기가 난해해지는 경우가 생긴다. 뿐만 아니라, 이 자바스크립트 파일을 다른 디렉토리로 옮기려면 상대 경로를 그에 따라 모두 수정해줘야 해서 코드 리펙토링(refactoring)이 상당히 불편하다.</p><p>물론 <code>절대경로</code>를 사용하면 되지 않을까 생각할 수 있지만, 개발자들마다 해당 프로젝트를 다른 디렉토리에 저장해놓을 것이기 때문에 현실적으로 적용하기 어려운 방법이다.</p><h1 id="별칭-경로"><a href="#별칭-경로" class="headerlink" title="별칭 경로"></a>별칭 경로</h1><p>위와 같은 문제는 자바스크립트 트랜스파일(transpile) 도구인 <code>Babel(바벨)</code>을 사용하면 이 문제를 비교적 간단하게 해결할 수 있습니다.</p><p>Babel의 플러그인을 사용해서 별칭(alias) 경로를 설정해주면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D babel-plugin-module-resolver</span><br></pre></td></tr></table></figure><p>Babel의 module resolver 플러그인을 개발 의존성으로 설치 후, <code>.babelrc</code>설정 파일을 열고, <code>plugins</code>항목에 <code>module-resolver</code>설정을 추가해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, ...],</span><br><span class="line">plugins: [</span><br><span class="line">...</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;module-resolver&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      root: [<span class="string">&#x27;./src&#x27;</span>],</span><br><span class="line">      <span class="built_in">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;#api&#x27;</span>: <span class="string">&#x27;./src/api/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#assets&#x27;</span>: <span class="string">&#x27;./src/asset/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#common&#x27;</span>: <span class="string">&#x27;./src/common/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#component&#x27;</span>: <span class="string">&#x27;./src/component/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#constant&#x27;</span>: <span class="string">&#x27;./src/constant/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;#container&#x27;</span>: <span class="string">&#x27;./src/container/&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>alias 부분에서 <code>./src/api</code> 를 <code>#api</code>로 표기함에 따라</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; <span class="built_in">alias</span> &#125; from <span class="string">&quot;./src/api/.../alias&quot;</span>;</span><br><span class="line"></span><br><span class="line">// 위 코드를 아래와 같이 작성할 수 있습니다.</span><br><span class="line"></span><br><span class="line">import &#123; <span class="built_in">alias</span> &#125; from <span class="string">&quot;#api/alias&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="마치면서"><a href="#마치면서" class="headerlink" title="마치면서"></a>마치면서</h1><p>이상으로 Babel의 module resolver 플러그인을 이용한 별칭 경로 설정 방법이였습니다.</p><p>만약 본인이 Webpack 설정과 겹쳐 고민이 있다면 다음 글<a href="https://chlee1001.github.io/2022/07/06/JS-Babel-2-22-07-06/">[JS] babelrc와 webpack.config</a>을 참고해주세요.</p>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Babel/">Babel</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B0%94%EB%B2%A8/">바벨</category>
      
      
      <comments>https://devch.co.kr/2022/07/05/JS-Babel-1-22-07-05/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CSS] 하드웨어 가속을 적극 활용하자 (translate3d)</title>
      <link>https://devch.co.kr/2022/07/04/CSS-Tip-1-22-07-04/</link>
      <guid>https://devch.co.kr/2022/07/04/CSS-Tip-1-22-07-04/</guid>
      <pubDate>Mon, 04 Jul 2022 07:44:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 CSS 하드웨어 가속
&lt;/aside&gt;



&lt;h1 id=&quot;하드웨어-가속은-왜-필요할까&quot;&gt;&lt;a href=&quot;#하드웨어-가속은-왜-필요할까&quot; class=&quot;headerlink&quot; title=&quot;하드웨어 가속은 왜 필요할까?&quot;&gt;&lt;/a&gt;하드웨어 가속은 왜 필요할까?&lt;/h1&gt;&lt;p&gt;복잡한 계산이 필요한 인터렉션은 렌더링에 많은 시간이 걸리게 된다. 이런 부분을 CPU가 아닌 GPU가 계산하도록 만들면 렌더링 시간을 줄일 수 있게 된다.&lt;/p&gt;
&lt;h2 id=&quot;하드웨어-가속을-사용하려면-어떤-스타일을-사용해야-할까&quot;&gt;&lt;a href=&quot;#하드웨어-가속을-사용하려면-어떤-스타일을-사용해야-할까&quot; class=&quot;headerlink&quot; title=&quot;*하드웨어 가속을 사용하려면 어떤 스타일을 사용해야 할까?*&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;*하드웨어 가속을 사용하려면 어떤 스타일을 사용해야 할까?*&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 CSS 하드웨어 가속</aside><h1 id="하드웨어-가속은-왜-필요할까"><a href="#하드웨어-가속은-왜-필요할까" class="headerlink" title="하드웨어 가속은 왜 필요할까?"></a>하드웨어 가속은 왜 필요할까?</h1><p>복잡한 계산이 필요한 인터렉션은 렌더링에 많은 시간이 걸리게 된다. 이런 부분을 CPU가 아닌 GPU가 계산하도록 만들면 렌더링 시간을 줄일 수 있게 된다.</p><h2 id="하드웨어-가속을-사용하려면-어떤-스타일을-사용해야-할까"><a href="#하드웨어-가속을-사용하려면-어떤-스타일을-사용해야-할까" class="headerlink" title="*하드웨어 가속을 사용하려면 어떤 스타일을 사용해야 할까?*"></a><em><strong>*하드웨어 가속을 사용하려면 어떤 스타일을 사용해야 할까?*</strong></em></h2><p>대표적으로 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes">animation(keyframes)</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change">will-change</a> 속성이 있지만 두 속성은 사용하는 데 있어서 한계가 있다.</p><p>다양한 케이스에 대응하기 쉽고 초기 렌더링에도 크게 영향을 주지 않는 방법으로는 <strong>transform: translate3d</strong> 스타일을 사용하면 된다. <strong>will-change, translate3d</strong>속성은 브라우저에게 **<code>&quot;얘는 3D 요소니까 하드웨어 가속을 써야 해!&quot;</code>**라고 알려주며 대상이 되는 요소를 자체 레이어로 승격시키고 GPU 메모리에 할당이 되어 하드웨어가 계산을 하게 된다.</p><h2 id="translate3d"><a href="#translate3d" class="headerlink" title="translate3d"></a>translate3d</h2><p><code>translate3d()</code>는 x, y, z 3차원의 값을 조정할 수 있다.</p><p>translate3d의 동작원리는  translate와 동일하다.</p><p>Y축으로 100% 원한다면 아래와 같이 작성가능하다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.anim</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.anim2</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="translate3d-vs-translateX-translateY"><a href="#translate3d-vs-translateX-translateY" class="headerlink" title="translate3d vs translateX, translateY"></a>translate3d vs translateX, translateY</h2><p><code>translate3d</code>는 하드웨어 가속, 즉 GPU를 사용하기 때문에 CSS 퍼포먼스가 일반적인 <code>translate()</code>보다 더 좋다. 따라서 더 좋은 퍼포먼스를 원한다면 <code>translate3d</code>를 사용하는 것이 좋을 듯 싶다.</p><h1 id="하드웨어-가속-사용-시-고려-사항"><a href="#하드웨어-가속-사용-시-고려-사항" class="headerlink" title="하드웨어 가속 사용 시 고려 사항"></a>하드웨어 가속 사용 시 고려 사항</h1><p>하드웨어 가속을 사용하면 웹 페이지의 렌더링 속도가 빨라지지만 잘못 사용하면 오히려 렌더링 속도가 느려지거나 브라우저에 문제가 일어날 수 있다.</p><h3 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h3><p>하드웨어 가속을 사용하면 다양한 성능 향상을 기대할 수 있지만, 그렇다고 모든 요소를 대상으로 적용하면 안 된다. 하드웨어 가속 대상을 지정할 때 다음의 사항을 기억하기 바란다.</p><ul><li>무분별한 하드웨어 가속은 오히려 브라우저를 느리게 한다.</li><li>요소에 하드웨어 가속 속성이 부여되면 즉시 대상 영역이 GPU에 업로드되며, 이때 업로드되는 영역이 크면 화면이 깜빡이는 현상이 발생될 수 있다.</li><li>요소에 하드웨어 가속 속성이 부여되면 레이어로 분리되며, 레이어는 변경되는 내용이 없는 한 요소를 GPU 메모리에 다시 업로드하지 않는다.</li><li>하드웨어 가속 속성을 사용한 요소의 내용이 변경되면 GPU 메모리가 갱신되므로 요소의 내용을 미리 변경한 다음 하드웨어 가속 속성을 부여한다.</li><li>성능이 낮은 기기에서 하드웨어 가속을 사용하면 오히려 성능 저하를 가져올 수 있다.</li></ul><h3 id="적용-시-고려-사항"><a href="#적용-시-고려-사항" class="headerlink" title="적용 시 고려 사항"></a>적용 시 고려 사항</h3><p>하드웨어 가속을 사용할 때는 다음과 같은 점을 고려한다.</p><ol><li>하드웨어 가속을 적용하는 요소의 크기는 작을수록 좋고, 요소의 개수는 화면에서 5~6개로 구성하는 것이 좋다.특히, 요소의 속성값에 따라 요소의 영역이 커질 수 있기 때문에 주의해서 적용해야 한다. 예를 들어 <code>text-indent</code>나 <code>left</code> 같은 속성에 <code>999em</code>이나 <code>9999px</code>과 같이 화면 영역을 지나치게 벗어나게 값을 설정하면, 콘텐츠 영역의 크기가 늘어나고 하드웨어 가속에 의해 구성된 레이어도 커지게 돼 불필요한 메모리를 사용하게 된다.</li><li>DOM 요소의 내용이 자주 변경되지 않는 영역에 하드웨어 가속을 적용한다.내용 변경이 아닌 이동이나 크기 변경이 자주 발생하는 영역에 하드웨어 가속을 적용하고, 이동이나 크기 변경은 <code>transform</code> 속성을 사용한다.</li><li>기기에 따라 선별적으로 하드웨어 가속을 적용한다.<a href="http://jindo.dev.naver.com/docs/jindo-mobile/archive/latest/doc/external/index.html">JMC(Jindo Mobile Component)</a>는 기기가 하드웨어 가속에 적합한 기기인지 확인할 수 있게 <a href="http://jindo.dev.naver.com/docs/jindo-mobile/archive/latest/doc/external/classes/jindo.m.html#method_useCss3d">useCss3d() 메서드</a>를 제공한다.</li></ol><hr><p>참고 자료:</p><p><a href="https://fe-developers.kakaoent.com/2021/211202-gpu-intersection-observer/">카카오웹툰은 하드웨어 가속과 IntersectionObserver를 어떻게 사용했을까?</a></p><p><a href="https://d2.naver.com/helloworld/2061385">NAVER D2</a></p>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/CSS/">CSS</category>
      
      
      <category domain="https://devch.co.kr/tags/CSS/">CSS</category>
      
      <category domain="https://devch.co.kr/tags/css/">css</category>
      
      <category domain="https://devch.co.kr/tags/stylesheet/">stylesheet</category>
      
      <category domain="https://devch.co.kr/tags/%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EA%B0%80%EC%86%8D/">하드웨어가속</category>
      
      <category domain="https://devch.co.kr/tags/3d/">3d</category>
      
      <category domain="https://devch.co.kr/tags/translate/">translate</category>
      
      
      <comments>https://devch.co.kr/2022/07/04/CSS-Tip-1-22-07-04/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] React의 setState는 비동기로 동작한다</title>
      <link>https://devch.co.kr/2022/06/27/REACT-setState-1-22-06-27/</link>
      <guid>https://devch.co.kr/2022/06/27/REACT-setState-1-22-06-27/</guid>
      <pubDate>Mon, 27 Jun 2022 08:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 React의 setState는 비동기일까?
&lt;/aside&gt;



&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [state, setState] = useState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; handleClick = &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState(state + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState(state + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState(state + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div className=&lt;span class=&quot;string&quot;&gt;&amp;quot;App&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;p&amp;gt;&amp;#123;state&amp;#125;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onClick=&amp;#123;&lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          handleClick();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        +&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; App;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;위 코드의 결과는 버튼을 눌러도 1씩 증가한다.&lt;/p&gt;
&lt;h3 id=&quot;이유는&quot;&gt;&lt;a href=&quot;#이유는&quot; class=&quot;headerlink&quot; title=&quot;이유는?&quot;&gt;&lt;/a&gt;이유는?&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 React의 setState는 비동기일까?</aside><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(state + <span class="number">1</span>);</span><br><span class="line">    setState(state + <span class="number">1</span>);</span><br><span class="line">    setState(state + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;state&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          handleClick();</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        +<span class="number">3</span></span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>위 코드의 결과는 버튼을 눌러도 1씩 증가한다.</p><h3 id="이유는"><a href="#이유는" class="headerlink" title="이유는?"></a>이유는?</h3><aside> 💡 하나의 페이지나 컴포넌트 내에도 수많은 상태값이 존재한다. 만약 이 상태 하나하나가 바뀔 때마다 화면을 리렌더링 한다면 문제가 생길수도 있다.<p>때문에 리액트는 성능의 향상을 위해서 setState를 연속 호출하면 배치 처리하여 한 번에 렌더링하도록 하였다. 아무리 많은 setState가 연속적으로 사용되었어도 배치 처리에 의해서 한 번의 렌더링으로 최신 상태를 유지하는 것이다.</p></aside><p>결국, 위 코드는 <code>setState</code> 는 동일한 key 값에 대하여 이전의 값을 계속해서 덮어써서, 마지막 명령어만 수행되는 셈이다.</p><h2 id="setState를-동기적으로-처리하려면"><a href="#setState를-동기적으로-처리하려면" class="headerlink" title="setState를 동기적으로 처리하려면!"></a>setState를 동기적으로 처리하려면!</h2><p>setState의 인자로 함수를 집어넣는 것이다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> prevState + <span class="number">1</span>);</span><br><span class="line">    setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> prevState + <span class="number">1</span>);</span><br><span class="line">    setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> prevState + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>위와 같이 작성하면  setState 내 함수의 매개변수로 이전 상태 값이 들어오므로, 동기적으로 동작하는 것을 확인할 수 있다. 이제 한번의 버튼 클릭으로 카운트가 3씩 증가하는 것을 볼 수 있다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><aside> 💡 - useState는 비동기적으로 동작하는 훅이다.<ul><li>비동기적으로 동작하는 이유는 성능 최적화 때문이며, setState를 배치처리한다.</li><li>useState를 동기적으로 처리하는 간단한 방법으로 인자에 함수를 넣는다.</li></ul></aside>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/React/">React</category>
      
      
      <category domain="https://devch.co.kr/tags/React/">React</category>
      
      <category domain="https://devch.co.kr/tags/%EB%A6%AC%EC%95%A1%ED%8A%B8/">리액트</category>
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/reactjs/">reactjs</category>
      
      
      <comments>https://devch.co.kr/2022/06/27/REACT-setState-1-22-06-27/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Fastlane] Fastlane을 통해 빌드를 자동화하자 1편</title>
      <link>https://devch.co.kr/2022/06/01/Fastlane-1-22-06-01/</link>
      <guid>https://devch.co.kr/2022/06/01/Fastlane-1-22-06-01/</guid>
      <pubDate>Wed, 01 Jun 2022 12:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chae-hyeon.notion.site/Fastlane-1-18ae2cc11dab4aa7998fddf41fa568a1&quot;&gt;노션으로 보기&lt;/a&gt;&lt;/p&gt;
&lt;aside&gt;
💡 필자는 React와 React Native를 이용해서 앱 개발 중인 6개월차 쌩 주니어 FE개발자이다. 실무에서 직접 하나하나 앱 빌드 작업이 아닌 fastlane을 통해 앱빌드를 자동화 하기위해 보았던 자료들과 겪었던 오류를 모아 내 입맛대로 다시보기와 공유 목적으로 작성한다. 프로젝트 구조, 코드 작성은 매우 주관적으로 적었기 때문에 피드백은 언제나 환영한다.
&lt;/aside&gt;



&lt;h1 id=&quot;What-is-the-Fastlane&quot;&gt;&lt;a href=&quot;#What-is-the-Fastlane&quot; class=&quot;headerlink&quot; title=&quot;What is the Fastlane?&quot;&gt;&lt;/a&gt;What is the Fastlane?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ruby 코드로 만들어진 앱 배포 자동화 툴&lt;/li&gt;
&lt;li&gt;커맨드라인으로 빌드 할 수 있음&lt;/li&gt;
&lt;li&gt;CI 시스템과의 통합 용이&lt;/li&gt;
&lt;li&gt;여러 구성원이 App Store에 앱을 배포하거나 단일 장치에 앱을 설치할 때 별도의 코드 서명 ID가 필요하지만, fastlane의 match를 사용하여 하나의 중앙저장소를 만들 수 있음&lt;ul&gt;
&lt;li&gt;기존 배포 인증서는 팀원 각각 만들어야 하고, 만료 기한이 있었던 것과 달리 깃 저장소에 저장된 배포 인증서로 사용 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단, 이중인증 필요하다는 한계 존재&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><p><a href="https://chae-hyeon.notion.site/Fastlane-1-18ae2cc11dab4aa7998fddf41fa568a1">노션으로 보기</a></p><aside>💡 필자는 React와 React Native를 이용해서 앱 개발 중인 6개월차 쌩 주니어 FE개발자이다. 실무에서 직접 하나하나 앱 빌드 작업이 아닌 fastlane을 통해 앱빌드를 자동화 하기위해 보았던 자료들과 겪었던 오류를 모아 내 입맛대로 다시보기와 공유 목적으로 작성한다. 프로젝트 구조, 코드 작성은 매우 주관적으로 적었기 때문에 피드백은 언제나 환영한다.</aside><h1 id="What-is-the-Fastlane"><a href="#What-is-the-Fastlane" class="headerlink" title="What is the Fastlane?"></a>What is the Fastlane?</h1><ul><li>ruby 코드로 만들어진 앱 배포 자동화 툴</li><li>커맨드라인으로 빌드 할 수 있음</li><li>CI 시스템과의 통합 용이</li><li>여러 구성원이 App Store에 앱을 배포하거나 단일 장치에 앱을 설치할 때 별도의 코드 서명 ID가 필요하지만, fastlane의 match를 사용하여 하나의 중앙저장소를 만들 수 있음<ul><li>기존 배포 인증서는 팀원 각각 만들어야 하고, 만료 기한이 있었던 것과 달리 깃 저장소에 저장된 배포 인증서로 사용 가능</li><li><strong>단, 이중인증 필요하다는 한계 존재</strong></li></ul></li></ul><h1 id="Run-Fastlane"><a href="#Run-Fastlane" class="headerlink" title="Run Fastlane"></a>Run Fastlane</h1><h2 id="01-setting"><a href="#01-setting" class="headerlink" title="01. setting"></a>01. setting</h2><h3 id="fastlane-설치-및-세팅"><a href="#fastlane-설치-및-세팅" class="headerlink" title="fastlane 설치 및 세팅"></a>fastlane 설치 및 세팅</h3><p><strong>#1. Install the latest Xcode command line tools</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p><strong>#2. ruby 2.5.0이상 버전 다운로드 필요</strong></p><ul><li><p><strong>Homebrew를 이용한 설치</strong></p></li><li><p>macOS Sierra 기준으로, 맥에는 이미 ruby가 설치되어 있음</p></li><li><p>기본설치 되어 있는 Ruby가 오래된 버전이라면 rbenv를 다운로드 하여 버전관리를 하는 것이 좋음</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rbenv ruby-build</span><br></pre></td></tr></table></figure></li><li><p><strong>rbenv 초기화</strong></p></li><li><p>rbenv의 설치가 완료되었다면 아래에 명령어를 실행하여 rbenv을 초기화한다.</p></li><li><p>아래 명령어를 실행하면 다음과 같이 나온다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rbenv init</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># Load rbenv automatically by appending</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc_profile:*eval &quot;$(rbenv init -)&quot;`</span></span><br></pre></td></tr></table></figure></li><li><p>위에 설명과 같이 .bashrc_profile 파일을 열고 아래와 같이 수정한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(rbenv init -)</span>&quot;</span> 또는</span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(rbenv init - zsh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고 아래 줄을 작성한다.</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>루비 2.5.0 이상 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rbenv install 3.1.2</span><br><span class="line"></span><br><span class="line">rbenv global 3.1.2 rbenv <span class="built_in">rehash</span></span><br><span class="line"></span><br><span class="line">ruby -v</span><br></pre></td></tr></table></figure></li></ul><p><strong>#3. fastlane을 설치하는 두가지 방법</strong></p><ul><li><p>Install fastlane using RubyGems</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install fastlane -NV</span><br></pre></td></tr></table></figure></li><li><p>✅ Alternatively using Homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install fastlane</span><br></pre></td></tr></table></figure><p>공식문서에서는 brew로 설치하는 방법을 권장</p><p>이유: <strong>RubyGems로 설치할 경우 전역적으로 설치되어 rbenv를 사용하는 의미가 사라짐</strong> → <strong>Homebrew로 설치하는 것을 권장</strong></p></li><li><p>참고 링크</p><p><a href="https://jojoldu.tistory.com/288">https://jojoldu.tistory.com/288</a></p><p><a href="https://dev-yakuza.posstree.com/ko/ruby-on-rails/rails-on-mac/">https://dev-yakuza.posstree.com/ko/ruby-on-rails/rails-on-mac/</a></p></li></ul><h2 id="02-Init-Fastlane"><a href="#02-Init-Fastlane" class="headerlink" title="02. Init Fastlane"></a>02. Init Fastlane</h2><p>fastlane을 위해 사용할 폴더 구조는 다양하다. 필자는 RN 프로젝트에서 다음과 같이 사용하고 있음.</p><p><strong>#1. 프로젝트 최상위 루트에서 init 후 아래와 같은 폴더 구조 생성</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> fastlane init</span><br><span class="line"></span><br><span class="line">이후 4번 선택</span><br></pre></td></tr></table></figure><p><img src="https://chlee1001.github.io/images/posts/web-app/fastlane/fastlane-init_fastlane_1.png" alt="Untitled"></p><p><img src="https://chlee1001.github.io/images/posts/web-app/fastlane/fastlane-init_fastlane_2.png" alt="Untitled"></p><p>root project |_ fastlane |_ android |<em>Fastfile |</em> ios |<em>Fastfile |</em> android |_ ios</p><p><strong>#2. Fastfile설정</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fastlane_require <span class="string">&#x27;dotenv&#x27;</span></span><br><span class="line"></span><br><span class="line">before_all <span class="keyword">do</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">import(<span class="string">&quot;./ios/Fastfile&quot;</span>)</span><br><span class="line">import(<span class="string">&quot;./android/Fastfile&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>#3. env 설정</strong></p><ul><li><p>Android와 iOS의 빌드를 위해 env를 분리시킨다.</p><ul><li>프로젝트 최상위 루트에 <code>.env.FLAndroid</code>, <code>.env.FLIos</code> 파일을 생성한다.</li></ul><p>env파일</p><ul><li>.env.FAndroid</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 개발</span></span><br><span class="line"></span><br><span class="line">APPCENTER_API_TOKEN=&#123;앱센터 토큰&#125;</span><br><span class="line">APPCENTER_OWNER_NAME=&#123;<span class="string">&quot;앱센터 사용자 이름&quot;</span>&#125;</span><br><span class="line">APPCENTER_APP_NAME=&#123;<span class="string">&quot;앱센터 앱 이름&quot;</span>&#125;</span><br><span class="line">APPCENTER_DISTRIBUTE_APK=<span class="string">&quot;./android/app/build/outputs/apk/development/release/app-development-release.apk&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 상용</span></span><br><span class="line"></span><br><span class="line">JSON_KEY=&#123;<span class="string">&quot;플레이스토어 API 액세스 키&quot;</span>&#125;</span><br><span class="line">STORE_DISTRIBUTE_AAB=<span class="string">&quot;./android/app/build/outputs/bundle/productionRelease/app-production-release.aab&quot;</span></span><br><span class="line">PACKAGE_NAME=<span class="string">&quot;앱 패키지 이름&quot;</span></span><br></pre></td></tr></table></figure><ul><li>.env.FLIos</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">IOS_PROJECT_PATH=<span class="string">&quot;./ios/project.xcodeproj&quot;</span></span><br><span class="line"></span><br><span class="line">SIGNING_IDENTITY_DEBUG=<span class="string">&quot;Apple Development: &quot;</span></span><br><span class="line">SIGNING_IDENTITY_RELEASE=<span class="string">&quot;Apple Distribution: &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 개발</span></span><br><span class="line">MATCH_ENV_PREFIX_DEVELOPMENT=<span class="string">&quot;sigh_io.project.dev_development&quot;</span></span><br><span class="line">MATCH_ENV_PREFIX_DEVELOPMENT_EXT=<span class="string">&quot;sigh_io.project.dev.OneSignalNotificationServiceExtension-Dev_development&quot;</span></span><br><span class="line"></span><br><span class="line">MATCH_ENV_PREFIX_ADHOC=<span class="string">&quot;sigh_io.project.dev_adhoc&quot;</span></span><br><span class="line">MATCH_ENV_PREFIX_ADHOC_EXT=<span class="string">&quot;sigh_io.project.dev.OneSignalNotificationServiceExtension-Dev_adhoc&quot;</span></span><br><span class="line"></span><br><span class="line">APPCENTER_API_TOKEN=앱센터 토큰</span><br><span class="line">APPCENTER_OWNER_NAME=<span class="string">&quot;앱센터 사용자 이름&quot;</span></span><br><span class="line">APPCENTER_APP_NAME=<span class="string">&quot;앱센터 앱 이름&quot;</span></span><br><span class="line">APPCENTER_DISTRIBUTE_IPA=<span class="string">&quot;./projectDev.ipa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 상용</span></span><br><span class="line">MATCH_ENV_PREFIX_APPSTORE=<span class="string">&quot;sigh_io..project.app_appstore&quot;</span></span><br><span class="line">MATCH_ENV_PREFIX_APPSTORE_EXT=<span class="string">&quot;sigh_io.project.app.OneSignalNotificationServiceExtension-Prod_appstore&quot;</span></span><br><span class="line"></span><br><span class="line">STORE_DISTRIBUTE_IPA=<span class="string">&quot;./project.ipa&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>#4. env 로드</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">platform :android <span class="keyword">do</span></span><br><span class="line">    before_all <span class="keyword">do</span></span><br><span class="line">        Dotenv.overload <span class="string">&#x27;../.env.FLAndroid&#x27;</span></span><br><span class="line">...</span><br><span class="line">    end</span><br><span class="line">...</span><br><span class="line">en</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">platform :ios <span class="keyword">do</span></span><br><span class="line">    before_all <span class="keyword">do</span></span><br><span class="line">        Dotenv.overload <span class="string">&#x27;../.env.FLIos&#x27;</span></span><br><span class="line">...</span><br><span class="line">    end</span><br><span class="line">...</span><br><span class="line">en</span><br></pre></td></tr></table></figure><p><strong>#5. Appfile 셋팅 (환경변수 파일)</strong></p><ul><li>필요에 따라 작성하면 된다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app_identifier(&#x27;io.project&#x27;) # The bundle identifier of your app</span></span><br><span class="line">apple_id(<span class="string">&#x27;ABCE@ABCD.com&#x27;</span>) <span class="comment"># Your Apple email address</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># itc_team_id(&#x27;####&#x27;) # App Store Connect Team ID</span></span><br><span class="line"><span class="comment"># team_id(&quot;ABCDE&quot;) # Developer Portal Team ID</span></span><br></pre></td></tr></table></figure><h2 id="03-How-to-Run-Fastlane"><a href="#03-How-to-Run-Fastlane" class="headerlink" title="03. How to Run Fastlane"></a>03. How to Run Fastlane</h2><p>local에 설치 된 ruby 버전이 아닌 프로젝트에서 지정한 ruby버전을 사용하기 위해 bundle exec 명령어를 이용</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bundle update --bunder</span><br><span class="line">bundle <span class="built_in">exec</span> fastane ....</span><br></pre></td></tr></table></figure><h3 id="Install-Plugin"><a href="#Install-Plugin" class="headerlink" title="Install Plugin"></a>Install Plugin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> fastlane add_plugin appcenter</span><br><span class="line">bundle <span class="built_in">exec</span> fastlane add_plugin load_json</span><br><span class="line">bundle <span class="built_in">exec</span> fastlane add_plugin yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 등등 필요한 플러그인을 추가한다.</span></span><br></pre></td></tr></table></figure><ul><li><p>add plugin 이후, fastlane 폴더 내 Pluginfile이 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Autogenerated by fastlane</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Ensure this file is checked in to source control!</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">&#x27;fastlane-plugin-appcenter&#x27;</span></span><br><span class="line">gem <span class="string">&#x27;fastlane-plugin-load_json&#x27;</span></span><br><span class="line">gem <span class="string">&#x27;fastlane-plugin-yarn&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>Pluginfile 생성 체크 후, 프로젝트 루트 디렉토리에 Gemfile 내에 생성된 경로와 일치한지 확인하기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">plugins_path = File.join(File.dirname(__FILE__), <span class="string">&#x27;fastlane&#x27;</span>, <span class="string">&#x27;Pluginfile&#x27;</span>)</span><br><span class="line">eval_gemfile(plugins_path) <span class="keyword">if</span> File.exist?(plugins_path)</span><br></pre></td></tr></table></figure></li><li><p>마무리</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br><span class="line"><span class="comment"># 이후, Gemfile.lock에 추가한 플러그인이 생겼는지 확인</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Fastlane/">Fastlane</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Fastlane/">Fastlane</category>
      
      <category domain="https://devch.co.kr/tags/%ED%8C%A8%EC%8A%A4%ED%8A%B8%EB%9E%98%EC%9D%B8/">패스트래인</category>
      
      <category domain="https://devch.co.kr/tags/%EC%95%B1/">앱</category>
      
      <category domain="https://devch.co.kr/tags/App/">App</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B9%8C%EB%93%9C/">빌드</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%8F%99%ED%99%94/">자동화</category>
      
      
      <comments>https://devch.co.kr/2022/06/01/Fastlane-1-22-06-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 클로저 간단 정리</title>
      <link>https://devch.co.kr/2022/02/12/JS-Closure-1-22-02-012/</link>
      <guid>https://devch.co.kr/2022/02/12/JS-Closure-1-22-02-012/</guid>
      <pubDate>Sat, 12 Feb 2022 13:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript closure
&lt;/aside&gt;

&lt;ul&gt;
&lt;li&gt;클로저는 먼저 자바스크립트 변수의 유효범위를 이해해야한다.&lt;/li&gt;
&lt;li&gt;클로저를 명확히 무엇이다라고 말하기는 어렵다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returnX&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = returnX()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; x) &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returnX&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x = &lt;span class=&quot;string&quot;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returnY&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + &lt;span class=&quot;string&quot;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = returnX()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; x) &lt;span class=&quot;comment&quot;&gt;// function =&amp;gt; return 값이 함수 덩어리이기 때문에&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = returnX()();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; x) &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num1&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;num2&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1 + num2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sum5 = sum(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 숫자5가 계속 바인딩되어 있는 상태&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum5(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;은닉화&quot;&gt;&lt;a href=&quot;#은닉화&quot; class=&quot;headerlink&quot; title=&quot;은닉화&quot;&gt;&lt;/a&gt;은닉화&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript closure</aside><ul><li>클로저는 먼저 자바스크립트 변수의 유효범위를 이해해야한다.</li><li>클로저를 명확히 무엇이다라고 말하기는 어렵다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnX</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = returnX()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> x) <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">returnY</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = returnX()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> x) <span class="comment">// function =&gt; return 값이 함수 덩어리이기 때문에</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = returnX()();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> x) <span class="comment">// string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">num2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum5 = sum(<span class="number">5</span>); <span class="comment">// 숫자5가 계속 바인딩되어 있는 상태</span></span><br><span class="line"><span class="built_in">console</span>.log(sum5(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h1 id="은닉화"><a href="#은닉화" class="headerlink" title="은닉화"></a>은닉화</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">privateData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = privateData(); <span class="comment">// privateData를 실행시켜야만 temp값을 알 수 있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">privateData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;,</span><br><span class="line">        changeValue: <span class="function">(<span class="params">newVal</span>) =&gt;</span> &#123;</span><br><span class="line">            temp = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> private = privateData();</span><br><span class="line"><span class="built_in">console</span>.log(private.value()); <span class="comment">// a</span></span><br><span class="line">private.changeValue(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(private.value()); <span class="comment">// b</span></span><br></pre></td></tr></table></figure><h1 id="활용사례"><a href="#활용사례" class="headerlink" title="활용사례"></a>활용사례</h1><ul><li><p>고민해봤을 때 debounce와 throttle에서 …사용</p><ul><li>debounce: 어떤 이벤트를 실행할 때 과하게 실행되는 것을 지연시켜주는 역할 (클릭지연..무한스크롤 지연)</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">buttonElement.addEventListener(</span><br><span class="line">    <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    debounce(handleClick, <span class="number">500</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, timeout = <span class="number">300</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.apply(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/closure/">closure</category>
      
      <category domain="https://devch.co.kr/tags/%ED%81%B4%EB%A1%9C%EC%A0%80/">클로저</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9D%80%EB%8B%89%ED%99%94/">은닉화</category>
      
      <category domain="https://devch.co.kr/tags/debounce/">debounce</category>
      
      
      <comments>https://devch.co.kr/2022/02/12/JS-Closure-1-22-02-012/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] Class 간단 정리</title>
      <link>https://devch.co.kr/2022/02/12/JS-Class-1-22-02-12/</link>
      <guid>https://devch.co.kr/2022/02/12/JS-Class-1-22-02-12/</guid>
      <pubDate>Sat, 12 Feb 2022 12:23:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript class
&lt;/aside&gt;

&lt;h1 id=&quot;클래스&quot;&gt;&lt;a href=&quot;#클래스&quot; class=&quot;headerlink&quot; title=&quot;클래스&quot;&gt;&lt;/a&gt;클래스&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt; 선언은 프로토타입 기반 상속을 사용&lt;/li&gt;
&lt;li&gt;정의: 함수 정의방법과 동일하게 가능, 함수 표현식과 함수 선언을 class표현식에서 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript class</aside><h1 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h1><ul><li><code>class</code> 선언은 프로토타입 기반 상속을 사용</li><li>정의: 함수 정의방법과 동일하게 가능, 함수 표현식과 함수 선언을 class표현식에서 사용 가능</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="인스턴스"><a href="#인스턴스" class="headerlink" title="인스턴스"></a>인스턴스</h1><ul><li>싱글리터럴로 만든 객체도 각자의 인스턴스를 뜻함..객체이지만 인스턴스</li><li>생성자 함수와 클래스를 활용하여…<strong>new 연산자</strong>와 더불어 만듬</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 생성자함수의 이름은 Pascal case로..</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newInstance = <span class="keyword">new</span> Func();</span><br><span class="line"><span class="keyword">const</span> newInstance2 = <span class="keyword">new</span> Class();</span><br></pre></td></tr></table></figure><hr><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.location = location;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27; 입니다.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=============================================</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27; 입니다.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> one = <span class="keyword">new</span> Person(<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;Korea&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> two = <span class="keyword">new</span> Person(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;Korea&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one.getName()); <span class="comment">// one 입니다.  </span></span><br></pre></td></tr></table></figure><ul><li>클래스는 뿐만 아니라 Private키워드, 정적메서드 등 수 많은 기능을 제공</li></ul><h1 id="클래스-확장-extends-상속"><a href="#클래스-확장-extends-상속" class="headerlink" title="클래스 확장 (extends, 상속)"></a>클래스 확장 (extends, 상속)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Super Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, sound</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.sound = sound;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;가(이)&#x27;</span> + <span class="built_in">this</span>.sound + <span class="string">&#x27;소리를 낸다.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sub Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Friends</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, sound</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sound); <span class="comment">// 부모의 생성자함수를 호출가능</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Friends(<span class="string">&#x27;개&#x27;</span>, <span class="string">&#x27;멍멍&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Friends(<span class="string">&#x27;고양이&#x27;</span>, <span class="string">&#x27;냐옹&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.getInfo()); <span class="comment">// 개가(이)멍멍소리를 낸다.</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.getInfo()); <span class="comment">// 고양이가(이)냐옹소리를 낸다.</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line"></span><br><span class="line">dog.contructor.name <span class="comment">// Friends</span></span><br><span class="line">cat.contructor.name <span class="comment">// Friends</span></span><br><span class="line"></span><br><span class="line">dog <span class="keyword">instanceof</span> Friends <span class="comment">// true</span></span><br><span class="line">dog <span class="keyword">instanceof</span> Animal <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/">클래스</category>
      
      <category domain="https://devch.co.kr/tags/class/">class</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4/">인스턴스</category>
      
      <category domain="https://devch.co.kr/tags/%EC%83%81%EC%86%8D/">상속</category>
      
      <category domain="https://devch.co.kr/tags/extends/">extends</category>
      
      
      <comments>https://devch.co.kr/2022/02/12/JS-Class-1-22-02-12/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 프로토타입 간단 정리</title>
      <link>https://devch.co.kr/2022/02/10/JS-Prototype-1-22-02-10/</link>
      <guid>https://devch.co.kr/2022/02/10/JS-Prototype-1-22-02-10/</guid>
      <pubDate>Thu, 10 Feb 2022 14:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Prototype
&lt;/aside&gt;



&lt;p&gt;자바스크립트는 프로토타입 기반의 언어다.&lt;/p&gt;
&lt;h1 id=&quot;constructor-생성자&quot;&gt;&lt;a href=&quot;#constructor-생성자&quot; class=&quot;headerlink&quot; title=&quot;constructor (생성자)&quot;&gt;&lt;/a&gt;constructor (생성자)&lt;/h1&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Paerson&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Prototype</aside><p>자바스크립트는 프로토타입 기반의 언어다.</p><h1 id="constructor-생성자"><a href="#constructor-생성자" class="headerlink" title="constructor (생성자)"></a>constructor (생성자)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paerson</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자함수는 프로토타입이 모든 자바스크립트에 들어있듯이 생성자도 모든 자바스크립트에서 확인가능하다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="keyword">new</span> Person(<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> two = <span class="keyword">new</span> Person(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one.constructor); <span class="comment">// [Function: Person]</span></span><br><span class="line"><span class="built_in">console</span>.log(two.constructor.name); <span class="comment">// Person</span></span><br></pre></td></tr></table></figure><p>어떠한 생성자로부터 생성되었는지 유추할 수 있다.</p><p><code>instanceof</code>로 식별</p><p>object instanceof constructor</p><h1 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong><strong>proto</strong></strong></h1><p>브라우저에서 비표준으로 제공했던…</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.__proto__ ...로 array의 프로토타입에 접근</span><br></pre></td></tr></table></figure><p>자바스크립트의 프로토타입에 직접 접근이 아니라 접근제어자로 접근할 수 있도록 도와주는 것으로 생각하면 됨. ⇒ <strong>하지만 사용하지 않는 것이 좋음</strong></p><p>ECMA Script2015부터는 표준화 된</p><ul><li>getPrototypeOf()</li><li>setPrototypeOf()</li></ul><p>를 사용하는 것을 추천</p><h1 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ANIMAL&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.sayName()); <span class="comment">// ANIMAL</span></span><br><span class="line"><span class="keyword">const</span> dog = <span class="built_in">Object</span>.create(animal);</span><br><span class="line"><span class="built_in">console</span>.log(dog.sayName()); <span class="comment">// ANIMAL</span></span><br></pre></td></tr></table></figure><h1 id="프로토타입-확장-extends-상속"><a href="#프로토타입-확장-extends-상속" class="headerlink" title="프로토타입 확장 (extends, 상속)"></a>프로토타입 확장 (extends, 상속)</h1><p>부모 ⇒ 자식 … 상속보단 확장이란 개념이 더 이해하기 쉽다. 부모가 가진 기능보다 자식이 더 많이 가질 수 있기 때문</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Super Class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name, sound</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.sound = sound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;가(이)&#x27;</span> + <span class="built_in">this</span>.sound + <span class="string">&#x27;소리를 낸다.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sub Class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Friends</span>(<span class="params">name, sound</span>) </span>&#123;</span><br><span class="line">    Animal.call(<span class="built_in">this</span>, name, sound); <span class="comment">// 명시적 바인딩 -&gt; Animal함수의 this를 Friends로 바인딩</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Friends.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">Friends.prototype.constructor = Friends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Friends(<span class="string">&#x27;개&#x27;</span>, <span class="string">&#x27;멍멍&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Friends(<span class="string">&#x27;고양이&#x27;</span>, <span class="string">&#x27;냐옹&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.getInfo()); <span class="comment">// 개가(이)멍멍소리를 낸다.</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.getInfo()); <span class="comment">// 고양이가(이)냐옹소리를 낸다.</span></span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">dog.contructor.name <span class="comment">// Friends</span></span><br><span class="line"></span><br><span class="line">dog <span class="keyword">instanceof</span> Friends <span class="comment">// true</span></span><br><span class="line">dog <span class="keyword">instanceof</span> Animal <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/">프로토타입</category>
      
      <category domain="https://devch.co.kr/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8/">프로토타입 체인</category>
      
      <category domain="https://devch.co.kr/tags/%EC%83%9D%EC%84%B1%EC%9E%90/">생성자</category>
      
      
      <comments>https://devch.co.kr/2022/02/10/JS-Prototype-1-22-02-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] this 간단 정리</title>
      <link>https://devch.co.kr/2022/02/10/JS-This-1-22-02-10/</link>
      <guid>https://devch.co.kr/2022/02/10/JS-This-1-22-02-10/</guid>
      <pubDate>Thu, 10 Feb 2022 12:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript this
&lt;/aside&gt;



&lt;p&gt;JavaScript에서 함수의 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;this&lt;/a&gt; 키워드는 다른 언어와 조금 다르게 동작한다.&lt;/p&gt;
&lt;p&gt;엄격모드와 비엄격 모드에서도 일부 차이가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this는 scope와 관계가 있다.&lt;/li&gt;
&lt;li&gt;객체에도 영향을 준다.&lt;/li&gt;
&lt;li&gt;this가 어디에 묶여있냐를 아는 것이 코드를 작성하는 시점, 동작하는 시점에 차이가 있을 수 있다.&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript this</aside><p>JavaScript에서 함수의 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this">this</a> 키워드는 다른 언어와 조금 다르게 동작한다.</p><p>엄격모드와 비엄격 모드에서도 일부 차이가 있다.</p><ul><li>this는 scope와 관계가 있다.</li><li>객체에도 영향을 준다.</li><li>this가 어디에 묶여있냐를 아는 것이 코드를 작성하는 시점, 동작하는 시점에 차이가 있을 수 있다.</li></ul><p>(함수를 어떻게 호출했는지 상관하지 않고 this값을 설정할 수 있는 <code>bind</code>메서드를 도입했고, ES2015는 스스로의 this 바인딩을 제공하지 않는 화살표 함수 를 추가했습니다.)</p><h2 id="암시적-바인딩"><a href="#암시적-바인딩" class="headerlink" title="암시적 바인딩"></a>암시적 바인딩</h2><p>암시적인 this 바인딩.. 사용자가 생각하지 않은대로 동작할 수 있다.</p><h3 id="전역-공간에서의-this"><a href="#전역-공간에서의-this" class="headerlink" title="전역 공간에서의 this"></a>전역 공간에서의 this</h3><ul><li>node.js 환경에서의 this는 <code>global</code></li><li>브라우저에서의 this는 <code>window</code></li></ul><h3 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h3><ul><li>함수에서의 this는 <code>window</code> ⇒ 전역공간에서의 this와 다르지 않다.</li></ul><h3 id="객체-메서드"><a href="#객체-메서드" class="headerlink" title="객체 (메서드)"></a>객체 (메서드)</h3><ul><li>this는 호출되는 대상의 객체를 가리키고 있다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">name: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.method() <span class="comment">// &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="명시적-바인딩"><a href="#명시적-바인딩" class="headerlink" title="명시적 바인딩"></a>명시적 바인딩</h2><ul><li>call(), bind(), apply()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;입니다&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zero = &#123;</span><br><span class="line">    name: <span class="string">&#x27;베이스&#x27;</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;입니다&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>call()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayFullName</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="built_in">this</span>.sayName()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = sayFullName.call(person, <span class="string">&#x27;Chaehyeon &#x27;</span>);</span><br><span class="line"><span class="comment">// Chaehyeon Lee입니다.</span></span><br></pre></td></tr></table></figure><ul><li>apply()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayFullName</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="built_in">this</span>.sayName()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = sayFullName.apply(person, [<span class="string">&#x27;Chaehyeon &#x27;</span>,<span class="string">&#x27;채현 &#x27;</span>]);</span><br><span class="line"><span class="comment">// 채현 Lee입니다.</span></span><br></pre></td></tr></table></figure><ul><li>bind()<ul><li><p>this를 묶어서 사용가능한다.</p></li><li><p>React Class Component에서 사용했다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayFullName</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="built_in">this</span>.sayName()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayFullNamePerson = sayFullName.bind(person);</span><br><span class="line"><span class="keyword">const</span> sayFullNameZero = sayFullName.bind(zero);</span><br><span class="line"><span class="built_in">console</span>.log(sayFullNamePerson(<span class="string">&#x27;Chaehyeon&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaehyeonLee입니다</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Object/">Object</category>
      
      <category domain="https://devch.co.kr/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://devch.co.kr/tags/this/">this</category>
      
      <category domain="https://devch.co.kr/tags/bind/">bind</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B0%94%EC%9D%B8%EB%94%A9/">바인딩</category>
      
      
      <comments>https://devch.co.kr/2022/02/10/JS-This-1-22-02-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 스코프 간단 정리</title>
      <link>https://devch.co.kr/2022/02/10/JS-Scope-1-22-02-10/</link>
      <guid>https://devch.co.kr/2022/02/10/JS-Scope-1-22-02-10/</guid>
      <pubDate>Wed, 09 Feb 2022 16:01:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Scope
&lt;/aside&gt;



&lt;h1 id=&quot;전역-스코프-Global&quot;&gt;&lt;a href=&quot;#전역-스코프-Global&quot; class=&quot;headerlink&quot; title=&quot;전역 스코프 (Global)&quot;&gt;&lt;/a&gt;전역 스코프 (Global)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;그냥 가장 바깥쪽&lt;/li&gt;
&lt;li&gt;언제 어디서나 접근 가능하기 때문에 재정의가 가능하다 ← 큰 문제&lt;ul&gt;
&lt;li&gt;그 결과, 프로그램의 실행 결과 때 내가 만든 변수들의 결과를 예측하기 어려워짐 → 팀 단위로 개발할 때 최악&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;지역-스코프&quot;&gt;&lt;a href=&quot;#지역-스코프&quot; class=&quot;headerlink&quot; title=&quot;지역 스코프&quot;&gt;&lt;/a&gt;지역 스코프&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Scope</aside><h1 id="전역-스코프-Global"><a href="#전역-스코프-Global" class="headerlink" title="전역 스코프 (Global)"></a>전역 스코프 (Global)</h1><ul><li>그냥 가장 바깥쪽</li><li>언제 어디서나 접근 가능하기 때문에 재정의가 가능하다 ← 큰 문제<ul><li>그 결과, 프로그램의 실행 결과 때 내가 만든 변수들의 결과를 예측하기 어려워짐 → 팀 단위로 개발할 때 최악</li></ul></li></ul><h1 id="지역-스코프"><a href="#지역-스코프" class="headerlink" title="지역 스코프"></a>지역 스코프</h1><h2 id="함수-스코프"><a href="#함수-스코프" class="headerlink" title="함수 스코프"></a>함수 스코프</h2><h2 id="블록-스코프"><a href="#블록-스코프" class="headerlink" title="블록 스코프"></a>블록 스코프</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 블록</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 함수 스코프 블록</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; <span class="comment">// 블록 스코프 블록</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="전역-객체"><a href="#전역-객체" class="headerlink" title="전역 객체"></a>전역 객체</h1><h2 id="브라우저"><a href="#브라우저" class="headerlink" title="브라우저"></a>브라우저</h2><p><strong>⇒ window</strong></p><h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><p><strong>⇒ Global</strong></p><h2 id="this"><a href="#this" class="headerlink" title="// this"></a>// this</h2><ul><li>브라우저에서 호출하면 window불러옴</li></ul><h1 id="호이스팅-Hoisting"><a href="#호이스팅-Hoisting" class="headerlink" title="호이스팅 (Hoisting)"></a>호이스팅 (Hoisting)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hoist = <span class="string">&#x27;호이스팅&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// 호이스팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><ul><li>첫번 째 console.log가 오류나지 않는 이유는<ul><li>변수 선언을 직접적으로 끌어올림</li><li>그래서 위 코드와 아래 코드랑 같다.</li></ul>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hoist; <span class="comment">// 1. 변수 선언</span></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// undefined // 2. 실행</span></span><br><span class="line"></span><br><span class="line">    hoist = <span class="string">&#x27;호이스팅&#x27;</span>; <span class="comment">// 3. 재할당</span></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// 호이스팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></li></ul><p><strong>애초부터 <code>var</code>를 안쓰면 된다.</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// Cannnot access &#x27;hoist&#x27; before initialization</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span>/<span class="keyword">const</span> hoist = <span class="string">&#x27;호이스팅&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(hoist); <span class="comment">// 호이스팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// Cannnot access &#x27;hoist&#x27; before initialization</span></span><br></pre></td></tr></table></figure><ul><li>임시적 사각지대 (TDZ)가 생긴다.</li><li>내부적으로 호이스팅이 일어나지만, 사용자에게는 보이지 않는것처럼 에러를 준다.</li></ul><h1 id="IIFE-즉시-실행-함수-표현"><a href="#IIFE-즉시-실행-함수-표현" class="headerlink" title="IIFE (즉시 실행 함수 표현)"></a>IIFE (즉시 실행 함수 표현)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">// 1</span></span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>함수를 괄호안에 넣고 바로 실행</p><ul><li>함수 공간을 완전히 분리할 수 있기 때문에 사용한다.<ul><li>그래서 let/const가 없을 때에 사람들이 외부에서 접근할 수 없게 블록스코프를 흉내내게 사용했다.</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Object/">Object</category>
      
      <category domain="https://devch.co.kr/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://devch.co.kr/tags/Scope/">Scope</category>
      
      <category domain="https://devch.co.kr/tags/%EC%8A%A4%EC%BD%94%ED%94%84/">스코프</category>
      
      <category domain="https://devch.co.kr/tags/Hoisting/">Hoisting</category>
      
      <category domain="https://devch.co.kr/tags/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85/">호이스팅</category>
      
      <category domain="https://devch.co.kr/tags/IIFE/">IIFE</category>
      
      <category domain="https://devch.co.kr/tags/%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4/">전역객체</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B8%94%EB%A1%9D/">블록</category>
      
      
      <comments>https://devch.co.kr/2022/02/10/JS-Scope-1-22-02-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] 자료 다루기</title>
      <link>https://devch.co.kr/2022/02/06/JS-Data-1-22-02-06/</link>
      <guid>https://devch.co.kr/2022/02/06/JS-Data-1-22-02-06/</guid>
      <pubDate>Sat, 05 Feb 2022 16:16:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript 자료 다루기
&lt;/aside&gt;



&lt;h1 id=&quot;객체&quot;&gt;&lt;a href=&quot;#객체&quot; class=&quot;headerlink&quot; title=&quot;객체&quot;&gt;&lt;/a&gt;객체&lt;/h1&gt;&lt;h2 id=&quot;Object-keys&quot;&gt;&lt;a href=&quot;#Object-keys&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys()&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;객체의 키들이다~~라는 느낌으로 객체의 키들이 배열로 반환된다.&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript 자료 다루기</aside><h1 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h1><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys()</a></h2><ul><li>객체의 키들이다~~라는 느낌으로 객체의 키들이 배열로 반환된다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(object1));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values()</a></h2><ul><li>객체의 값들이다~~라는 느낌으로 객체의 Value들이 배열로 반환된다.</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(object1));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;somestring&quot;, 42, false]</span></span><br></pre></td></tr></table></figure><h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries()</a></h2><ul><li>객체를 인자로 받아, key와 value를 쌍으로 가진 배열을 반환한다.</li><li>for…in와 같은 순서로 주어진 객체 자체의 enumerable 속성을 가짐<ul><li>인덱스마다 배열을 가져서, 첫번째가 key, 두번째가 value이다.<ul><li>배열안에 배열</li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  b: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(object1)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output:</span></span><br><span class="line"><span class="comment">// &quot;a: somestring&quot;</span></span><br><span class="line"><span class="comment">// &quot;b: 42&quot;</span></span><br></pre></td></tr></table></figure><h1 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h1><h2 id="요소-추가와-제거"><a href="#요소-추가와-제거" class="headerlink" title="요소 추가와 제거"></a>요소 추가와 제거</h2><ul><li><p>unshift ⇒ 배열의 앞에 요소 추가</p></li><li><p>push ⇒ 배열의 끝에 요소 추가</p></li><li><p>shift ⇒ 배열의 앞에 요소 제거</p></li><li><p>pop ⇒ 배열의 끝에 요소 제거</p></li><li><p>splice ⇒  배열의 인덱스를 기반으로 요소 추가 및 제거</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line">months.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="요소-병합"><a href="#요소-병합" class="headerlink" title="요소 병합"></a>요소 병합</h2><ul><li>concat</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = array1.concat(array2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array3);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alpha = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">alpha.concat(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 결과: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = [...array1, ...array2];</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="고차-함수로-조작-내장-메서드"><a href="#고차-함수로-조작-내장-메서드" class="headerlink" title="고차 함수로 조작 (내장 메서드)"></a>고차 함수로 조작 (내장 메서드)</h2><ul><li>대표적으로 map, filter, reduce</li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> langs = [<span class="string">&#x27;JS&#x27;</span>, <span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newLangs = langs.map(<span class="function"><span class="params">lang</span> =&gt;</span> lang + <span class="string">&#x27; 언어&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newLangs);</span><br><span class="line"><span class="comment">// [ &#x27;JS 언어&#x27;, &#x27;HTML 언어&#x27;, &#x27;CSS 언어&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> langs = [<span class="string">&#x27;JS&#x27;</span>, <span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = langs.filter(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> lang === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strings = langs.filter(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> lang === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(strings)</span><br><span class="line"><span class="comment">// [ &#x27;JS&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27; ]</span></span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> el === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> numbers = langs.filter(isNumber);</span><br><span class="line"><span class="built_in">console</span>.log(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isString = <span class="function">(<span class="params">el</span>) =&gt;</span> <span class="keyword">typeof</span> el === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> strings = langs.filter(isString)</span><br><span class="line"><span class="built_in">console</span>.log(string)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3 ]</span></span><br><span class="line"><span class="comment">// [ &#x27;JS&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><ul><li>그전에 전형적인 명령어 프로그래밍 방식</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// argument로 받거나</span></span><br><span class="line"><span class="comment">// 인자에 spread형식으로 받거나...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTotal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        temp = temp + <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumTotal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line"><span class="comment">// 28</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTotal</span>(<span class="params">...numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// reduce((누적값, 현재값)&#123;&#125;,초기값)</span></span><br><span class="line">    <span class="keyword">return</span> numbers.reduce(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 첫번째는 초기값(total(0))+ 인자(1)이 total로 들어가고</span></span><br><span class="line"><span class="comment">// 그 다음 total(1)+인자(cur(2))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumTotal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure><h2 id="요소-정렬"><a href="#요소-정렬" class="headerlink" title="요소 정렬"></a>요소 정렬</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orderNumbers = numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="built_in">console</span>.log(orderNumbers);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strings = [<span class="string">&#x27;마&#x27;</span>, <span class="string">&#x27;가&#x27;</span>, <span class="string">&#x27;라&#x27;</span>, <span class="string">&#x27;나&#x27;</span>, <span class="string">&#x27;다&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> orderStrings = strings.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b));</span><br><span class="line"><span class="built_in">console</span>.log(orderStrings);</span><br><span class="line"><span class="comment">//[ &#x27;가&#x27;, &#x27;나&#x27;, &#x27;다&#x27;, &#x27;라&#x27;, &#x27;마&#x27; ]</span></span><br></pre></td></tr></table></figure><h2 id="값-검색"><a href="#값-검색" class="headerlink" title="값 검색"></a>값 검색</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strings = [<span class="string">&#x27;마&#x27;</span>, <span class="string">&#x27;가&#x27;</span>, <span class="string">&#x27;라&#x27;</span>, <span class="string">&#x27;나&#x27;</span>, <span class="string">&#x27;다&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = strings.find(<span class="function">(<span class="params">string</span>) =&gt;</span> string === <span class="string">&#x27;나&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 나  ///없으면 undefinded</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = strings.findIndex(<span class="function">(<span class="params">string</span>) =&gt;</span> string === <span class="string">&#x27;나&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = strings.indexOf(<span class="string">&#x27;나&#x27;</span>); <span class="comment">// 왼쪽부터,,, lastIndexOf()</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = strings.includes(<span class="string">&#x27;나&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Object/">Object</category>
      
      <category domain="https://devch.co.kr/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      <category domain="https://devch.co.kr/tags/Array/">Array</category>
      
      <category domain="https://devch.co.kr/tags/%EB%B0%B0%EC%97%B4/">배열</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%A3%8C/">자료</category>
      
      
      <comments>https://devch.co.kr/2022/02/06/JS-Data-1-22-02-06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] Object 객체</title>
      <link>https://devch.co.kr/2022/02/02/JS-Object-1-22-02-02/</link>
      <guid>https://devch.co.kr/2022/02/02/JS-Object-1-22-02-02/</guid>
      <pubDate>Wed, 02 Feb 2022 14:45:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript Object
&lt;/aside&gt;

&lt;h1 id=&quot;객체-생성&quot;&gt;&lt;a href=&quot;#객체-생성&quot; class=&quot;headerlink&quot; title=&quot;객체 생성&quot;&gt;&lt;/a&gt;객체 생성&lt;/h1&gt;&lt;p&gt;일반적으로 생성 할 수 있는 객체&lt;/p&gt;
&lt;h3 id=&quot;싱글-리터럴-Literal-객체&quot;&gt;&lt;a href=&quot;#싱글-리터럴-Literal-객체&quot; class=&quot;headerlink&quot; title=&quot;싱글 리터럴 (Literal) 객체&quot;&gt;&lt;/a&gt;싱글 리터럴 (Literal) 객체&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript Object</aside><h1 id="객체-생성"><a href="#객체-생성" class="headerlink" title="객체 생성"></a>객체 생성</h1><p>일반적으로 생성 할 수 있는 객체</p><h3 id="싱글-리터럴-Literal-객체"><a href="#싱글-리터럴-Literal-객체" class="headerlink" title="싱글 리터럴 (Literal) 객체"></a>싱글 리터럴 (Literal) 객체</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">property: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="생성자-함수-객체-PascalCase"><a href="#생성자-함수-객체-PascalCase" class="headerlink" title="생성자 함수 객체 // PascalCase"></a>생성자 함수 객체 // PascalCase</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NewObject</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObject = <span class="keyword">new</span> NewObject(’Lee’);</span><br></pre></td></tr></table></figure><p>파스칼 케이스 → 암묵적, 명시적 생성자 함수</p><h3 id="Object-Create"><a href="#Object-Create" class="headerlink" title="Object.Create()"></a>Object.Create()</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newObject2 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">name: &#123;</span><br><span class="line">value: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">writable: <span class="literal">true</span>, <span class="comment">// 덮어쓸 수 있는지</span></span><br><span class="line">enumerable: <span class="literal">true</span>, <span class="comment">// forin문과 같은 것으로 열거할 수 있는지</span></span><br><span class="line">configurable: <span class="literal">true</span>, <span class="comment">// 객체 기술자를 수정할 수 있는지</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// const newObject2 = Object.create(프로토타입, 객체 서술자(기술자));</span></span><br><span class="line"></span><br><span class="line">newObject2.name = <span class="string">&#x27;Kim&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newObject2) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="프로퍼티-열거"><a href="#프로퍼티-열거" class="headerlink" title="프로퍼티 열거"></a>프로퍼티 열거</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">prop1: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">prop2: <span class="string">&#x27;value2&#x27;</span>,</span><br><span class="line">prop3: <span class="string">&#x27;value3&#x27;</span>,</span><br><span class="line">prop4: <span class="string">&#x27;value4&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prop = <span class="string">&#x27;prop&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> prop1 = <span class="string">&#x27;prop1&#x27;</span>;</span><br><span class="line"></span><br><span class="line">obj.prop1 <span class="comment">// value1</span></span><br><span class="line">obj[<span class="string">&#x27;prop1&#x27;</span>] <span class="comment">// value1</span></span><br><span class="line">obj[prop + <span class="number">1</span>] <span class="comment">// value1</span></span><br><span class="line">obj[prop1] <span class="comment">// value1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key); <span class="comment">// prop1, prop2, prop3, prop4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[key]); <span class="comment">// value1, value2, value3, value4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="체인닝-방지를-위해"><a href="#체인닝-방지를-위해" class="headerlink" title="체인닝 방지를 위해"></a>체인닝 방지를 위해</h2><p>블록 스코프 내에 변수가 없으면 그 위로 찾아 간다…</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj[key]); <span class="comment">// value1, value2, value3, value4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 상속되거나 확장되어 사용 된 객체의 상위에서 꺼내오지 않도록 하는 방어문</span></span><br></pre></td></tr></table></figure><h1 id="프로퍼티-조작"><a href="#프로퍼티-조작" class="headerlink" title="프로퍼티 조작"></a>프로퍼티 조작</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">firstName: <span class="string">&quot;Chaehyeon&quot;</span>,</span><br><span class="line">location: <span class="string">&quot;Korea&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 추가</span></span><br><span class="line">person.lastName: <span class="string">&quot;Lee&quot;</span></span><br><span class="line"><span class="comment">// 수정</span></span><br><span class="line">person.lastName: <span class="string">&quot;lee&quot;</span></span><br><span class="line"><span class="comment">// 삭제</span></span><br><span class="line">delet person.location;</span><br><span class="line"></span><br><span class="line">person; <span class="comment">// &#123; firstName: &quot;Chaehyeon&quot;, lastName: &quot;lee&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const는 재할당을 막는 것... 그래서 가능</span></span><br></pre></td></tr></table></figure><h1 id="프로퍼티-접근자-getter-setter"><a href="#프로퍼티-접근자-getter-setter" class="headerlink" title="프로퍼티 접근자 (getter, setter)"></a>프로퍼티 접근자 (getter, setter)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 추가, 수정, 삭제 등을 접근해서 조작할 때 안전하게 하기 위해</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">_firstName: <span class="string">&quot;Chaehyeon&quot;</span>,</span><br><span class="line">lastName: <span class="string">&quot;Lee&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title">firstName</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._firstName.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="title">firstName</span>(<span class="params">newFirstName</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> newFirstName !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>._firstName = <span class="string">&#x27;undefinedName&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>._firstName = newFirstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._firstName + <span class="built_in">this</span>.lastName + <span class="string">&#x27;입니다&#x27;</span>.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(person.firstName); // CHAEHYEON</span></span><br><span class="line"><span class="comment">// console.log(person.fullName); // LeeChaehyeon입니다</span></span><br><span class="line"></span><br><span class="line">person.firstName = <span class="number">12345</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.firstName); <span class="comment">// UNDEFINDEDNAME</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="인스턴스"><a href="#인스턴스" class="headerlink" title="인스턴스"></a>인스턴스</h1><p>OOP</p><p>인스턴스 === 유일한, 고유한 객체?</p><p>객체 하나하나가 곧 인스턴스이다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">name: <span class="string">&#x27;chaehyeon&#x27;</span>,</span><br><span class="line">age: <span class="number">26</span>,</span><br><span class="line">locaiton: <span class="string">&#x27;korea&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me2 = &#123;</span><br><span class="line">name: <span class="string">&#x27;chaehyeon&#x27;</span>,</span><br><span class="line">age: <span class="number">26</span>,</span><br><span class="line">locaiton: <span class="string">&#x27;korea&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me === me2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(me.name === me2.name); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 그 자체를 비교할 때에는 객체의 메모리 주소를 본다.</span></span><br><span class="line"><span class="comment">// 당연히 메모리주소는 다르다</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">name: <span class="string">&#x27;chaehyeon&#x27;</span>,</span><br><span class="line">age: <span class="number">26</span>,</span><br><span class="line">locaiton: <span class="string">&#x27;korea&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 자주 만들고 싶을 때 -&gt; 생성자 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, location</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.location = location;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27; 입니다&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 여기서 this는 &quot;생성 될&quot; 인스턴스를 가리킨다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me2 = <span class="keyword">new</span> Person(<span class="string">&#x27;ChaehyeonLee&#x27;</span>, <span class="number">26</span>, <span class="string">&#x27;korea&#x27;</span>);</span><br><span class="line"><span class="comment">// Person &#123; name: &#x27;ChaehyeonLee&#x27;, age: 26, location: &#x27;korea&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> you <span class="keyword">new</span> Person(<span class="string">&#x27;Kim&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;korea&#x27;</span>);</span><br><span class="line"><span class="comment">// Person &#123; name: &#x27;Kim&#x27;, age: 20, location: &#x27;korea&#x27; &#125;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/Object/">Object</category>
      
      <category domain="https://devch.co.kr/tags/%EA%B0%9D%EC%B2%B4/">객체</category>
      
      
      <comments>https://devch.co.kr/2022/02/02/JS-Object-1-22-02-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] DOM 문서 객체 모델</title>
      <link>https://devch.co.kr/2022/02/02/JS-DOM-1-22-02-02/</link>
      <guid>https://devch.co.kr/2022/02/02/JS-DOM-1-22-02-02/</guid>
      <pubDate>Wed, 02 Feb 2022 13:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript DOM
&lt;/aside&gt;



&lt;h2 id=&quot;DOM-문서-객체-모델…Document-Object-Model&quot;&gt;&lt;a href=&quot;#DOM-문서-객체-모델…Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;DOM (문서 객체 모델…Document Object Model)&quot;&gt;&lt;/a&gt;DOM (문서 객체 모델…Document Object Model)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML ⇒ 문서&lt;/li&gt;
&lt;li&gt;문서를 조작하는 언어 ⇒ JavaScript&lt;/li&gt;
&lt;li&gt;Document Object Model ← JavaScript가 DOM을 통해 HTML을 조작&lt;/li&gt;
&lt;li&gt;DOM 내부에는 Node: HTML 요소 하나하나 전부를 지칭&lt;ul&gt;
&lt;li&gt;Node는 Tree형태로 부모노드가 자식노드를, 자식노드가 그 자식노드를…&lt;/li&gt;
&lt;li&gt;각 Node에는 수 많은 Properties, Methods…가 존재&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript DOM</aside><h2 id="DOM-문서-객체-모델…Document-Object-Model"><a href="#DOM-문서-객체-모델…Document-Object-Model" class="headerlink" title="DOM (문서 객체 모델…Document Object Model)"></a>DOM (문서 객체 모델…Document Object Model)</h2><ul><li>HTML ⇒ 문서</li><li>문서를 조작하는 언어 ⇒ JavaScript</li><li>Document Object Model ← JavaScript가 DOM을 통해 HTML을 조작</li><li>DOM 내부에는 Node: HTML 요소 하나하나 전부를 지칭<ul><li>Node는 Tree형태로 부모노드가 자식노드를, 자식노드가 그 자식노드를…</li><li>각 Node에는 수 많은 Properties, Methods…가 존재</li></ul></li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>HTML문서를 JavaScript로 모델링 한 것이 DOM</li><li>인터페이스를 하나하나 자르면 단위가 Node이며, Node는 Tree구조로 이루어져있다.</li></ul><p>Eg) ’li’ 태그를 뽑아보면 정보가아래처럼 수 많이 담겨있다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">accessKey: <span class="string">&quot;&quot;</span></span><br><span class="line">ariaAtomic: <span class="literal">null</span></span><br><span class="line">ariaAutoComplete: <span class="literal">null</span></span><br><span class="line">ariaBusy: <span class="literal">null</span></span><br><span class="line">ariaChecked: <span class="literal">null</span></span><br><span class="line">ariaColCount: <span class="literal">null</span></span><br><span class="line">ariaColIndex: <span class="literal">null</span></span><br><span class="line">ariaColSpan: <span class="literal">null</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Dom-선택"><a href="#Dom-선택" class="headerlink" title="Dom 선택"></a>Dom 선택</h2><h2 id="자바스크립트에서-HTML-특정-Element들을-가져오는-법-고전적"><a href="#자바스크립트에서-HTML-특정-Element들을-가져오는-법-고전적" class="headerlink" title="자바스크립트에서 HTML 특정 Element들을 가져오는 법 (고전적)"></a>자바스크립트에서 HTML 특정 Element들을 가져오는 법 (고전적)</h2><ul><li><p>Document.getElementById() 문서에 특정 id만 가져오고 싶을 때</p></li><li><p>Element.getElementsByClassName()</p><p>클래스 이름으로… 모든 자식의 엘리먼트를 가져온다. → HTML Collection 형태로 가져온다.</p></li><li><p>Document.getElementsByTagName()</p><p>태그 이름으로 가져온다.</p></li></ul><h2 id="자바스크립트에서-HTML-특정-Element들을-가져오는-법-비교적-최신"><a href="#자바스크립트에서-HTML-특정-Element들을-가져오는-법-비교적-최신" class="headerlink" title="자바스크립트에서 HTML 특정 Element들을 가져오는 법 (비교적 최신)"></a>자바스크립트에서 HTML 특정 Element들을 가져오는 법 (비교적 최신)</h2><ul><li><p>Document.querySelector()</p><p>id(.), class(#), tag name 모두에 사용가능, 첫번째로 보이는 것을 가져온다.</p></li><li><p>document.querySelectorAll()</p><p>해당하는 것을 모두 가져온다. (문자열 O) ⇒ NodeList로 가져오기 때문에 Array로 변환해서 사용한다.</p></li><li><p>그 외 다양한 조합으로 사용가능하다.</p><p>eg) div.note → div태그 내에 note id를 가져온다.</p></li></ul><h2 id="Dom-조작"><a href="#Dom-조작" class="headerlink" title="Dom 조작"></a>Dom 조작</h2><p>조작하기 위한 method들도 매우 많기 때문에 MDN문서를 보면서…</p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Node/textContent">textContent</a>()… 텍스트 삽입</li><li>removeChild()… child 제거</li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Document/createElement">createElement</a>()…element 삽입</li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Node/appendChild">appendChild</a>()</li></ul><hr><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Element/innerHTML">innerHTML</a>을 통해서 문자열로 컨트롤 가능하다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/DOM/">DOM</category>
      
      
      <comments>https://devch.co.kr/2022/02/02/JS-DOM-1-22-02-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] Algorithm - 자주 쓰이는 구문 정리(22.02.06)</title>
      <link>https://devch.co.kr/2022/01/31/JS-Algorithm-1-22-01-31/</link>
      <guid>https://devch.co.kr/2022/01/31/JS-Algorithm-1-22-01-31/</guid>
      <pubDate>Mon, 31 Jan 2022 09:26:50 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript를 이용하여 알고리즘 문제를 풀 때 자주 쓰이는 구문을 정리하자!
&lt;/aside&gt;


&lt;h1 id=&quot;배열-중복값-개수-구하기&quot;&gt;&lt;a href=&quot;#배열-중복값-개수-구하기&quot; class=&quot;headerlink&quot; title=&quot;배열 중복값 개수 구하기&quot;&gt;&lt;/a&gt;배열 중복값 개수 구하기&lt;/h1&gt;&lt;h3 id=&quot;reduce&quot;&gt;&lt;a href=&quot;#reduce&quot; class=&quot;headerlink&quot; title=&quot;reduce()&quot;&gt;&lt;/a&gt;reduce()&lt;/h3&gt;&lt;p&gt;reduce() 함수는, 배열의 값을 순회하면서 배열의 값을 특정 형태로 누적하는데 사용합니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript를 이용하여 알고리즘 문제를 풀 때 자주 쓰이는 구문을 정리하자!</aside><h1 id="배열-중복값-개수-구하기"><a href="#배열-중복값-개수-구하기" class="headerlink" title="배열 중복값 개수 구하기"></a>배열 중복값 개수 구하기</h1><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce() 함수는, 배열의 값을 순회하면서 배열의 값을 특정 형태로 누적하는데 사용합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputNum = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = inputNum.reduce(<span class="function">(<span class="params">obj, t</span>) =&gt;</span> (obj[t] = obj[t] ? obj[t] + <span class="number">1</span> : <span class="number">1</span>, obj), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = inputNum.reduce(<span class="function">(<span class="params">obj, t</span>) =&gt;</span> &#123;</span><br><span class="line">    obj[t] = (obj[t] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; &#x27;1&#x27;: 3, &#x27;2&#x27;: 2, &#x27;3&#x27;: 1, &#x27;4&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cnt = &#123;&#125;</span><br><span class="line">inputNum.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> (cnt[x] ? (cnt[x] += <span class="number">1</span>) : (cnt[x] = <span class="number">1</span>)));</span><br><span class="line"><span class="comment">// &#123; &#x27;1&#x27;: 3, &#x27;2&#x27;: 2, &#x27;3&#x27;: 1, &#x27;4&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>forEach의 callback함수를 풀어쓰면 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cnt[x]) &#123;</span><br><span class="line">cnt[x] = cnt[x] + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cnt[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, 처음에 배열의 첫 번째 값인 ‘1’이 들어오면, cnt[x] (cnt.1)은 undefined이다.</p><p>cnt[x]가 undefinded이므로 cnt에 key ‘1’를 추가하고 value 1을 세팅해준다. </p><p>이후 다시 ‘1’이 들어오면 cnt[1]은 존재하므로, cnt[1]값 1에 1을 더해준다.</p><hr><h1 id="배열에-1-N-값-세팅하기"><a href="#배열에-1-N-값-세팅하기" class="headerlink" title="배열에 1 ~ N 값 세팅하기"></a>배열에 1 ~ N 값 세팅하기</h1><h3 id="기본-반복문을-이용"><a href="#기본-반복문을-이용" class="headerlink" title="기본 반복문을 이용"></a>기본 반복문을 이용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ES6의-Array-from-and-keys-이용"><a href="#ES6의-Array-from-and-keys-이용" class="headerlink" title="ES6의 Array from() and keys() 이용"></a>ES6의 Array <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from">from()</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys">keys()</a> 이용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(N).keys());</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="Spread를-이용한-방법"><a href="#Spread를-이용한-방법" class="headerlink" title="Spread를 이용한 방법"></a>Spread를 이용한 방법</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [...Array(<span class="number">10</span>).keys()];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="1부터-시작하기-위해-from과-length-property-이용"><a href="#1부터-시작하기-위해-from과-length-property-이용" class="headerlink" title="1부터 시작하기 위해 from과 length property 이용"></a>1부터 시작하기 위해 from과 length property 이용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">10</span>&#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure><h3 id="단순-원하는-길이만큼-0으로-채우기"><a href="#단순-원하는-길이만큼-0으로-채우기" class="headerlink" title="단순 원하는 길이만큼 0으로 채우기"></a>단순 원하는 길이만큼 0으로 채우기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10001</span>).fill(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Algorithm/">Algorithm</category>
      
      <category domain="https://devch.co.kr/categories/Algorithm/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/ES6/">ES6</category>
      
      <category domain="https://devch.co.kr/tags/Algorithm/">Algorithm</category>
      
      
      <comments>https://devch.co.kr/2022/01/31/JS-Algorithm-1-22-01-31/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Promise</title>
      <link>https://devch.co.kr/2022/01/03/JS-ES6-8-22-01-03/</link>
      <guid>https://devch.co.kr/2022/01/03/JS-ES6-8-22-01-03/</guid>
      <pubDate>Sun, 02 Jan 2022 15:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - Promise
&lt;/aside&gt;

&lt;h1 id=&quot;Promises&quot;&gt;&lt;a href=&quot;#Promises&quot; class=&quot;headerlink&quot; title=&quot;Promises&quot;&gt;&lt;/a&gt;Promises&lt;/h1&gt;&lt;h2 id=&quot;async&quot;&gt;&lt;a href=&quot;#async&quot; class=&quot;headerlink&quot; title=&quot;async&quot;&gt;&lt;/a&gt;async&lt;/h2&gt;&lt;p&gt;자바스크립트는 순차적으로 처리되는게 아니라 한꺼번에 실행된다. ⇒ 자바스크립트의 비동기성(async)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - Promise</aside><h1 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h1><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>자바스크립트는 순차적으로 처리되는게 아니라 한꺼번에 실행된다. ⇒ 자바스크립트의 비동기성(async)</p><p>이벤트 루프에서 비동기적으로 실행시킨다.</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타낸다.</p><p>내가 아직 모르는 값이랑 같이 일하게 해준다</p><p>금방 끝나진 않겠지만 곧 오면 이걸 가지고 작업할 게 표시 해주는 것</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseTest1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;Test Pass&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(console.log, 1000, promiseTest1);</span></span><br><span class="line">promiseTest1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseTest1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(reject, <span class="number">3000</span>, <span class="string">&quot;Test Fail&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(console.log, 1000, promiseTest1);</span></span><br><span class="line">promiseTest1</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">console</span>.log(error));</span><br></pre></td></tr></table></figure><h2 id="Chaining-Promise"><a href="#Chaining-Promise" class="headerlink" title="Chaining Promise"></a>Chaining Promise</h2><p>.then().then()…. 할때 리턴 필요</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseTest2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promiseTest2</span><br><span class="line">  .then(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">otherNumber</span>) =&gt;</span> <span class="built_in">console</span>.log(otherNumber * <span class="number">2</span>)); </span><br></pre></td></tr></table></figure><h2 id="Propmise-all"><a href="#Propmise-all" class="headerlink" title="Propmise.all"></a>Propmise.all</h2><p>Promise.all은 주어진 모든 Promise를 실행한 후 진행되는 하나의 Promise를 반환한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise.all</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">5000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> motherPromise = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line"></span><br><span class="line">motherPromise</span><br><span class="line">  .then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">console</span>.log(values))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 프로미스가 resolve 해야지 출력</span></span><br><span class="line"><span class="comment">// 5초후 마지막 first 끝나야 최종출력</span></span><br><span class="line"><span class="comment">// 중간에 reject 뜨면 바로 중단</span></span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>기본적으로 promise all이랑 같지만 하나만 resolve 되거나 reject하면 된다. 가장 빨리 리턴 되는 걸로 결정, 부모프로미스를 차지하고 그 값 하나 리턴함</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise.race</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> motherPromise2 = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br><span class="line"></span><br><span class="line"> motherPromise2</span><br><span class="line">   .then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">console</span>.log(values))</span><br><span class="line">   .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// second</span></span><br></pre></td></tr></table></figure><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>뭘하든 마지막에 실행된다. 보통 작업이 다 끝나고 로딩 끝낼 때 쓴다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finally</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m done&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/ES6/">ES6</category>
      
      
      <comments>https://devch.co.kr/2022/01/03/JS-ES6-8-22-01-03/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - For</title>
      <link>https://devch.co.kr/2022/01/02/JS-ES6-7-22-01-02/</link>
      <guid>https://devch.co.kr/2022/01/02/JS-ES6-7-22-01-02/</guid>
      <pubDate>Sun, 02 Jan 2022 10:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - For
&lt;/aside&gt;

&lt;h1 id=&quot;For&quot;&gt;&lt;a href=&quot;#For&quot; class=&quot;headerlink&quot; title=&quot;For&quot;&gt;&lt;/a&gt;For&lt;/h1&gt;&lt;h2 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;headerlink&quot; title=&quot;forEach&quot;&gt;&lt;/a&gt;forEach&lt;/h2&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; friends = [&lt;span class=&quot;string&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;you&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;nico&amp;quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; addHeart = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;current, index, array &lt;/span&gt;) =&amp;gt;&lt;/span&gt; ( &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(current, index, array));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;friends.forEach(addHeart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 파라미터 첫번째로 값을 주고 두번째로 인덱스를 주고 세번째로 현재 배열을 준다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// me 0 [&amp;quot;me&amp;quot;, &amp;quot;you&amp;quot;, &amp;quot;nico&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// you 1 [&amp;quot;me&amp;quot;, &amp;quot;you&amp;quot;, &amp;quot;nico&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// nico 2 [&amp;quot;me&amp;quot;, &amp;quot;you&amp;quot;, &amp;quot;nico&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - For</aside><h1 id="For"><a href="#For" class="headerlink" title="For"></a>For</h1><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> friends = [<span class="string">&quot;me&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;nico&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addHeart = <span class="function">(<span class="params">current, index, array </span>) =&gt;</span> ( <span class="built_in">console</span>.log(current, index, array));</span><br><span class="line"></span><br><span class="line">friends.forEach(addHeart);</span><br><span class="line"><span class="comment">// 파라미터 첫번째로 값을 주고 두번째로 인덱스를 주고 세번째로 현재 배열을 준다</span></span><br><span class="line"><span class="comment">// me 0 [&quot;me&quot;, &quot;you&quot;, &quot;nico&quot;]</span></span><br><span class="line"><span class="comment">// you 1 [&quot;me&quot;, &quot;you&quot;, &quot;nico&quot;]</span></span><br><span class="line"><span class="comment">// nico 2 [&quot;me&quot;, &quot;you&quot;, &quot;nico&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> friend <span class="keyword">of</span> friends) &#123;</span><br><span class="line">  <span class="comment">// 장점 1) const, let 뭐로 할건지 결정가능, forEach에서는 안됨</span></span><br><span class="line">  <span class="built_in">console</span>.log(friend); <span class="comment">// 모두다 출력됨</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> <span class="string">&quot;strings&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(char); <span class="comment">// s t r i n g s 출력</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 장점 2) iterable한 모든것에서 작동한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> friend <span class="keyword">of</span> friends) &#123;</span><br><span class="line">  <span class="keyword">if</span> (friend === <span class="string">&quot;steve&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(char); <span class="comment">// &quot;me&quot;, &quot;you&quot;, &quot;nico&quot; 이렇게만 출력</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 장점 3) 루프를 멈출수가있음!, 최고장점</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/ES6/">ES6</category>
      
      
      <comments>https://devch.co.kr/2022/01/02/JS-ES6-7-22-01-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JS] ES6 - Rest and Spread</title>
      <link>https://devch.co.kr/2022/01/02/JS-ES6-6-22-01-02/</link>
      <guid>https://devch.co.kr/2022/01/02/JS-ES6-6-22-01-02/</guid>
      <pubDate>Sun, 02 Jan 2022 09:30:00 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;이채현&lt;/em&gt;&lt;/p&gt;
&lt;aside&gt;
💡 Javascript ES6 문법을 배워보자 - Rest &amp; Spread
&lt;/aside&gt;

&lt;h1 id=&quot;Rest-and-Spread&quot;&gt;&lt;a href=&quot;#Rest-and-Spread&quot; class=&quot;headerlink&quot; title=&quot;Rest and Spread&quot;&gt;&lt;/a&gt;Rest and Spread&lt;/h1&gt;&lt;h2 id=&quot;Spread&quot;&gt;&lt;a href=&quot;#Spread&quot; class=&quot;headerlink&quot; title=&quot;Spread&quot;&gt;&lt;/a&gt;Spread&lt;/h2&gt;&lt;p&gt;기본적으로 변수를 가져와 풀어 해쳐 전개해놓는 것.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em>이채현</em></p><aside>💡 Javascript ES6 문법을 배워보자 - Rest & Spread</aside><h1 id="Rest-and-Spread"><a href="#Rest-and-Spread" class="headerlink" title="Rest and Spread"></a>Rest and Spread</h1><h2 id="Spread"><a href="#Spread" class="headerlink" title="Spread"></a>Spread</h2><p>기본적으로 변수를 가져와 풀어 해쳐 전개해놓는 것.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> friends = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(friends); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(...friends); <span class="comment">// 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> family = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(friends + family); <span class="comment">// 1,2,3,4a,b,c</span></span><br><span class="line"><span class="built_in">console</span>.log([friends, family]); <span class="comment">// [ [ 1, 2, 3, 4 ], [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ] ]</span></span><br><span class="line"><span class="built_in">console</span>.log([...friends, ...family]); <span class="comment">// [ 1,   2,   3,   4, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"><span class="comment">// spread를 통해 모든 요소를 담고 있는 하나의 object를 얻을 수 있다.</span></span><br><span class="line"><span class="comment">// array.push()를 이용하지 않고 값을 추가하여 새로운 객체를 만든다.</span></span><br><span class="line"><span class="keyword">const</span> newFriends = [...friends, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(newFriends); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> admin = &#123;</span><br><span class="line">  username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(&#123; ...admin, <span class="attr">password</span>: <span class="number">123</span> &#125;); <span class="comment">// &#123; username: &#x27;admin&#x27;, password: 123 &#125;</span></span><br><span class="line"><span class="comment">// 조건식</span></span><br><span class="line"><span class="comment">// lastName을 입력받았을 때 값이 있을 때만 객체에 넣어주기</span></span><br><span class="line"><span class="keyword">const</span> lastName = prompt(<span class="string">&quot;Last name: &quot;</span>);</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  username: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  ...(lastName !== <span class="string">&quot;&quot;</span> &amp;&amp; &#123; lastName &#125;), <span class="comment">// spread로 전개하려면 데이터가 object여야하므로, 중괄호로 감싸줌</span></span><br><span class="line">  <span class="comment">//   lastName: lastName !== &quot;&quot; ? lastName : undefined,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><h2 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h2><p>끝없는 인자를 받아 볼때 유용하게 이용할 수있다</p><p><code>spread</code>는 죄다 펼쳐 확대시키는 것이고, ****<code>rest</code>는 하나에 담아서 축소시키는것</p><p>어디에 들어가느냐에 따라 spread와 rest(parameter부분에 들어가면 )로 갈릴수있음</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> infiniteArge = <span class="function">(<span class="params">...kimchi</span>) =&gt;</span> <span class="built_in">console</span>.log(kimchi);</span><br><span class="line"></span><br><span class="line">infiniteArge(<span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="string">&quot;lalala&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="comment">// 전부 배열에 넣어서 출력된다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bestFriends = <span class="function">(<span class="params">firstPotato, ...potatos</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`he is <span class="subst">$&#123;firstPotato&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(potatos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bestFriends(<span class="string">&quot;nico&quot;</span>, <span class="string">&quot;lynn&quot;</span>, <span class="string">&quot;steve&quot;</span>, <span class="string">&quot;flynn&quot;</span>);</span><br><span class="line"><span class="comment">// he is nico</span></span><br><span class="line"><span class="comment">// [&quot;lynn&quot;, &quot;steve&quot;, &quot;flynn&quot;]</span></span><br><span class="line"><span class="comment">// 이렇게 출력된다</span></span><br></pre></td></tr></table></figure><h2 id="Rest-Spread-Destructure-Magic"><a href="#Rest-Spread-Destructure-Magic" class="headerlink" title="Rest + Spread + Destructure Magic"></a><strong>Rest + Spread + Destructure Magic</strong></h2><p>object를 지우거나 정리할 때 유용하다</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">name :<span class="string">&quot;nico&quot;</span>,</span><br><span class="line">age:<span class="number">24</span>,</span><br><span class="line">password : <span class="number">12345</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> killPassword = <span class="function">(<span class="params">&#123;password, ...rest&#125;</span>) =&gt;</span> rest; <span class="comment">// destructure + rest</span></span><br><span class="line"><span class="comment">// destructuring을 통해 user의 password를 가져오고, 나머지를 rest에 저장</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cleanUser = killPassword(user)</span><br><span class="line"><span class="built_in">console</span>.log(cleanUser) <span class="comment">// &#123;name:&quot;nico&quot;, age:24&#125; 출력한다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setCountry = <span class="function">(<span class="params">&#123; country = <span class="string">&quot;KR&quot;</span>, ...rest &#125;</span>) =&gt;</span> (&#123; country, ...rest &#125;);</span><br><span class="line"><span class="comment">// default 설정 + rest + spread</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setCountry(user));</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;country : &quot;KR&quot;, name :&quot;nico&quot;, age:24, password : 12345&#125; 출력</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://devch.co.kr/categories/Web-App/">Web/App</category>
      
      <category domain="https://devch.co.kr/categories/Web-App/Javascript/">Javascript</category>
      
      
      <category domain="https://devch.co.kr/tags/JS/">JS</category>
      
      <category domain="https://devch.co.kr/tags/Javascript/">Javascript</category>
      
      <category domain="https://devch.co.kr/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">자바스크립트</category>
      
      <category domain="https://devch.co.kr/tags/ES6/">ES6</category>
      
      
      <comments>https://devch.co.kr/2022/01/02/JS-ES6-6-22-01-02/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
